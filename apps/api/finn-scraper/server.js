/**
 * BOLIG-SCRAPER MED PRIORITERT SALGSOPPGAVE-ANALYSE
 * 
 * VIKTIG DATAKILDEPRIORITET:
 * 1. SALGSOPPGAVE (HOVEDKILDE) - Ekstrahert fra PDF/dokument med robuste regex
 * 2. SCRAPING (FALLBACK) - Henter data fra Finn.no-siden hvis salgsoppgave ikke finnes
 * 
 * Alle endepunkter pr√∏ver √• kombinere disse kildene med prioritering av salgsoppgave-data.
 */

const express = require("express");
const cors = require("cors");
const puppeteer = require("puppeteer");
const multer = require("multer");
const pdfParse = require("pdf-parse");
const { OpenAI } = require("openai");
const fs = require("fs");
const path = require('path');
const crypto = require('crypto');
require('dotenv').config();

// **REDIS CACHING SETUP** - Intelligent cache med fallback
let redis = null;
try {
  const Redis = require('ioredis');
  redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379', {
    maxRetriesPerRequest: 1,
    lazyConnect: true,
    showFriendlyErrorStack: true,
    connectTimeout: 5000,
    retryDelayOnFailover: 100
  });
  
  redis.on('connect', () => {
    console.log('‚úÖ Redis tilkoblet - caching aktivert');
  });
  
  redis.on('error', (err) => {
    console.log('‚ö†Ô∏è Redis tilkobling feilet:', err.message);
    console.log('üíæ Fortsetter uten cache-funksjonalitet');
    redis = null; // Disable caching hvis Redis ikke virker
  });
  
  redis.on('close', () => {
    console.log('üì¥ Redis tilkobling lukket');
  });
} catch (error) {
  console.log('‚ö†Ô∏è Redis ikke tilgjengelig:', error.message);
  console.log('üíæ Fortsetter uten cache-funksjonalitet');
}

const app = express();
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

const upload = multer({ 
  dest: "uploads/",
  limits: {
    fileSize: 50 * 1024 * 1024 // 50MB limit for salgsoppgaver
  }
});

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// System prompt for salgsoppgave analyse
const systemPrompt = `
Du er en norsk boligekspert og eiendomsmegler med lang erfaring. Du f√•r en full salgsoppgave fra Finn.no/DNB/andre kilder.

**VIKTIG:** Du vil f√• b√•de strukturerte fakta og full tekst fra salgsoppgaven. PRIORITER ALLTID de strukturerte faktaene som er ekstrahert direkte fra salgsoppgaven - disse er mest n√∏yaktige.

Analyser informasjonen grundig og gi en profesjonell vurdering p√•:

1. TEKNISK TILSTAND: Vurder bygningens tekniske standard, vedlikeholdsbehov, installasoner (VVS, elektro, etc.)
2. RISIKOFAKTORER: Identifiser potensielle problemer, fremtidige kostnader, juridiske forhold
3. PRISVURDERING: Sammenlign med markedet, vurder pris per m¬≤, markedsposisjon
4. OPPUSSINGSBEHOV: Identifiser n√∏dvendige og √∏nskede oppgraderinger med estimerte kostnader
5. ANBEFALTE SP√òRSM√ÖL: Viktige sp√∏rsm√•l √• stille under visning eller til megler

Gi svaret som strukturert JSON med disse feltene:
{
  "tekniskTilstand": {
    "score": 1-10,
    "sammendrag": "kort sammendrag",
    "detaljer": "detaljert analyse",
    "hovedFunn": ["liste", "med", "hovedpunkter"]
  },
  "risiko": {
    "score": 1-10,
    "sammendrag": "kort sammendrag", 
    "risikoer": ["liste", "med", "risikoer"],
    "anbefalinger": ["liste", "med", "anbefalinger"]
  },
  "prisvurdering": {
    "score": 1-10,
    "sammendrag": "kort sammendrag",
    "prisPerM2Vurdering": "analyse av pris per m¬≤",
    "markedsvurdering": "sammenligning med markedet"
  },
  "oppussingBehov": {
    "nodvendig": ["liste", "med", "n√∏dvendige", "tiltak"],
    "onsket": ["liste", "med", "√∏nskede", "oppgraderinger"],
    "estimertKostnad": "estimat p√• totalkostnader"
  },
  "anbefalteSporsmal": [
    "Viktige sp√∏rsm√•l til visning",
    "Sp√∏rsm√•l om teknisk tilstand",
    "Sp√∏rsm√•l om √∏konomi og vedlikehold"
  ],
  "konklusjon": "samlet vurdering og anbefaling"
}

V√¶r kritisk og realistisk i vurderingene. Base deg p√• norske forhold og standarder.
`;

// Hjelpefunksjon for √• hente tekst fra element med fallback
async function safeGetText(page, selectors, fallback = '') {
  // Hvis selectors er en string, gj√∏r den til array
  if (typeof selectors === 'string') {
    selectors = [selectors];
  }
  
  for (const selector of selectors) {
    try {
      // Hvis selector inneholder :contains, bruk evaluate
      if (selector.includes(':contains')) {
        const searchText = selector.match(/:contains\("([^"]+)"\)/)?.[1];
        if (searchText) {
          const result = await page.evaluate((text) => {
            const elements = Array.from(document.querySelectorAll('*'));
            for (const el of elements) {
              if (el.textContent && el.textContent.includes(text) && el.children.length === 0) {
                return el.textContent.trim();
              }
            }
            return '';
          }, searchText);
          if (result && result.length > 0) {
            return result;
          }
        }
      } else {
        const result = await page.$eval(selector, el => el.textContent.trim());
        if (result && result.length > 0) {
          return result;
        }
      }
    } catch {
      // Pr√∏v neste selector
    }
  }
  return fallback;
}

// Hjelpefunksjon for √• hente attributt fra element
async function safeGetAttribute(page, selectors, attribute, fallback = '') {
  if (typeof selectors === 'string') {
    selectors = [selectors];
  }
  
  for (const selector of selectors) {
    try {
      const result = await page.$eval(selector, (el, attr) => el.getAttribute(attr), attribute);
      if (result && result.length > 0) {
        return result;
      }
    } catch {
      // Pr√∏v neste selector
    }
  }
  return fallback;
}

// Hjelpefunksjon for √• finne tekst som inneholder spesifikke ord
async function findTextContaining(page, searchTerms) {
  try {
    return await page.evaluate((terms) => {
      const elements = Array.from(document.querySelectorAll('*'));
      for (const term of terms) {
        for (const el of elements) {
          const text = el.textContent?.trim();
          if (text && text.toLowerCase().includes(term.toLowerCase()) && text.length < 200) {
            // Sjekk om dette ser ut som riktig data
            if (text.includes(':') || text.includes('kr') || text.includes('m¬≤')) {
              return text;
            }
          }
        }
      }
      return '';
    }, searchTerms);
  } catch {
    return '';
  }
}

// Hjelpefunksjon for √• hente alle bilder
async function getAllImages(page) {
  try {
    return await page.evaluate(() => {
      const images = [];
      
      // Hent hovedbilde fra meta tag
      const ogImage = document.querySelector('meta[property="og:image"]');
      if (ogImage && ogImage.content) {
        images.push(ogImage.content);
      }
      
      // Hent bilder fra bildegalleri - flere selektorer
      const gallerySelectors = [
        'img[src*="images.finncdn.no"]',
        '.image-gallery img',
        '[data-testid*="image"] img',
        '.gallery img',
        '.carousel img',
        'img[alt*="bilde"]'
      ];
      
      gallerySelectors.forEach(selector => {
        const galleryImages = document.querySelectorAll(selector);
        galleryImages.forEach(img => {
          if (img.src && img.src.includes('http') && !images.includes(img.src)) {
            images.push(img.src);
          }
        });
      });
      
      return images.slice(0, 20); // Maks 20 bilder
    });
  } catch {
    return [];
  }
}

// Hjelpefunksjon for √• hente beskrivelse/annonsetekst
async function getDescription(page) {
  try {
    return await page.evaluate(() => {
      // Pr√∏v forskjellige selektorer for beskrivelse
      const selectors = [
        '[data-testid="description"]',
        '.description',
        '.ad-text',
        '.object-description',
        '[class*="description"]',
        '[class*="Description"]',
        'section p',
        'article p'
      ];
      
      for (const selector of selectors) {
        const element = document.querySelector(selector);
        if (element && element.textContent.trim().length > 50) {
          return element.textContent.trim();
        }
      }
      
      // Fallback: se etter lange tekstblokker
      const paragraphs = document.querySelectorAll('p, div');
      for (const p of paragraphs) {
        const text = p.textContent.trim();
        if (text.length > 100 && (text.includes('bolig') || text.includes('leilighet') || text.includes('hus'))) {
          return text;
        }
      }
      
      return '';
    });
  } catch {
    return '';
  }
}

// Hjelpefunksjon for √• hente alle n√∏kkeldata
async function getKeyValueData(page) {
  try {
    return await page.evaluate(() => {
      const data = {};
      
      // Hent alle tekstelementer og se etter m√∏nstre
      const allElements = document.querySelectorAll('*');
      allElements.forEach(el => {
        const text = el.textContent?.trim();
        if (!text || text.length > 200) return;
        
        // Se etter m√∏nstre som "N√∏kkel: Verdi" eller "N√∏kkel Verdi"
        const patterns = [
          /^(Bruksareal|Prim√¶rareal|Totalareal|Areal)[\s:]+(.+)$/i,
          /^(Antall rom|Rom)[\s:]+(.+)$/i,
          /^(Antall soverom|Soverom)[\s:]+(.+)$/i,
          /^(Bygge√•r|Bygget)[\s:]+(.+)$/i,
          /^(Eierform)[\s:]+(.+)$/i,
          /^(Boligtype|Type)[\s:]+(.+)$/i,
          /^(Felleskostnader|Fellesutgifter)[\s:]+(.+)$/i,
          /^(Kommunale avgifter|Kommunale avg\.)[\s:]+(.+)$/i,
          /^(Eiendomsskatt)[\s:]+(.+)$/i,
          /^(Fellesgjeld)[\s:]+(.+)$/i,
          /^(Energimerking)[\s:]+(.+)$/i,
          /^(Etasje)[\s:]+(.+)$/i,
          /^(Parkering)[\s:]+(.+)$/i,
          /^(Balkong|Terrasse|Hage)[\s:]+(.+)$/i
        ];
        
        patterns.forEach(pattern => {
          const match = text.match(pattern);
          if (match) {
            const key = match[1].toLowerCase().replace(/[^a-z√¶√∏√•]/g, '');
            data[key] = match[2].trim();
          }
        });
      });
      
      return data;
    });
  } catch {
    return {};
  }
}

// Hjelpefunksjon for √• ekstraktere Finn-kode fra URL
function extractFinnCode(url) {
  const match = url.match(/finnkode=(\d+)/);
  return match ? match[1] : null;
}

// Hjelpefunksjon for √• validere at et dokument tilh√∏rer riktig eiendom
async function validateDocumentForProperty(documentUrl, originalFinnUrl, page) {
  const finnCode = extractFinnCode(originalFinnUrl);
  if (!finnCode) return true; // Hvis vi ikke kan finne finn-kode, godta dokumentet
  
  // **FORBEDRET VALIDERING MED LENGRE TIMEOUT OG BEDRE FEILH√ÖNDTERING**
  try {
    console.log(`üîç Validerer dokument: ${documentUrl.substring(0, 100)}...`);
    
    const tempPage = await page.browser().newPage();
    
    // Sett mer realistisk timeout og user agent
    await tempPage.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    // √òk timeout til 30 sekunder og bruk mindre streng waitUntil
    await tempPage.goto(documentUrl, { 
      waitUntil: 'domcontentloaded', // Mindre streng enn networkidle0
      timeout: 30000 // 30 sekunder i stedet for 10
    });
    
    // Vent litt ekstra for at siden skal bli ferdig lastet
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Hent b√•de tekst og metadata fra siden
    const validation = await tempPage.evaluate((expectedFinnCode) => {
      const pageText = document.body.textContent.toLowerCase();
      const pageHtml = document.body.innerHTML.toLowerCase();
      const pageTitle = document.title.toLowerCase();
      
      // Sjekk forskjellige m√•ter finn-koden kan v√¶re referert til
      const checks = {
        directFinnCode: pageText.includes(expectedFinnCode),
        finnUrl: pageText.includes(`finnkode=${expectedFinnCode}`),
        finnReference: pageText.includes('finn.no') && pageText.includes(expectedFinnCode),
        htmlFinnCode: pageHtml.includes(expectedFinnCode),
        dataAttributes: pageHtml.includes(`"${expectedFinnCode}"`),
        titleFinnCode: pageTitle.includes(expectedFinnCode),
        // Sjekk ogs√• URL-en selv
        urlFinnCode: window.location.href.includes(expectedFinnCode)
      };
      
      // Ekstra sjekk for megler-spesifikke estate-IDs eller referanser
      let hasValidReference = Object.values(checks).some(check => check);
      
      // Hvis ingen direkte referanse, men det er en megler-side, godkjenn den
      // (mange meglere bruker interne IDs i stedet for finn-koder)
      if (!hasValidReference && (
        pageText.includes('salgsoppgave') || 
        pageText.includes('prospekt') ||
        pageText.includes('eiendomsmegler') ||
        pageHtml.includes('eiendomsmegler')
      )) {
        hasValidReference = true;
        checks.meglerSide = true;
        console.log('   - Godkjent som megler-side med salgsoppgave-innhold');
      }
      
      return {
        checks: checks,
        hasValidReference: hasValidReference,
        pageTextPreview: pageText.substring(0, 300),
        url: window.location.href,
        title: document.title
      };
    }, finnCode);
    
    await tempPage.close();
    
    console.log(`üîç Validering for Finn-kode ${finnCode}:`);
    console.log('   - Direkte finn-kode:', validation.checks.directFinnCode ? '‚úÖ' : '‚ùå');
    console.log('   - Finn URL:', validation.checks.finnUrl ? '‚úÖ' : '‚ùå');
    console.log('   - Finn referanse:', validation.checks.finnReference ? '‚úÖ' : '‚ùå');
    console.log('   - HTML finn-kode:', validation.checks.htmlFinnCode ? '‚úÖ' : '‚ùå');
    console.log('   - URL finn-kode:', validation.checks.urlFinnCode ? '‚úÖ' : '‚ùå');
    console.log('   - Megler-side:', validation.checks.meglerSide ? '‚úÖ' : '‚ùå');
    console.log('   - Resultat:', validation.hasValidReference ? '‚úÖ GODKJENT' : '‚ùå FORKASTET');
    
    if (!validation.hasValidReference) {
      console.log('   - Side tittel:', validation.title);
      console.log('   - Innhold (preview):', validation.pageTextPreview.substring(0, 150));
    }
    
    return validation.hasValidReference;
  } catch (error) {
    console.log('‚ö†Ô∏è Validering feilet:', error.message);
    
    // **MINDRE STRENG FALLBACK**: Godkjenn dokumentet hvis det er fra en kjent megler-side
    if (documentUrl.includes('eiendomsmegler') || documentUrl.includes('em1sr')) {
      console.log('   - Godkjent som kjent megler-side tross validering-feil');
      return true;
    }
    
    return false;
  }
}

// Hjelpefunksjon for √• s√∏ke etter iframe og object tags med PDF-innhold
async function findIframeAndObjectPDFs(page) {
  console.log('üîç S√∏ker etter PDF-er i iframe og object tags...');
  
  return await page.evaluate(() => {
    const pdfs = [];
    
    // S√∏k etter iframe tags
    const iframes = document.querySelectorAll('iframe');
    iframes.forEach(iframe => {
      const src = iframe.src || iframe.getAttribute('data-src');
      if (src && (src.includes('.pdf') || src.includes('pdf'))) {
        pdfs.push({
          url: src,
          text: iframe.title || iframe.getAttribute('aria-label') || 'PDF i iframe',
          type: 'iframe_pdf',
          element: 'iframe'
        });
        console.log('üìÑ Fant PDF i iframe:', src);
      }
    });
    
    // S√∏k etter object tags
    const objects = document.querySelectorAll('object');
    objects.forEach(obj => {
      const data = obj.data || obj.getAttribute('data-src');
      if (data && (data.includes('.pdf') || data.includes('pdf'))) {
        pdfs.push({
          url: data,
          text: obj.title || obj.getAttribute('aria-label') || 'PDF i object',
          type: 'object_pdf',
          element: 'object'
        });
        console.log('üìÑ Fant PDF i object:', data);
      }
    });
    
    // S√∏k etter embed tags
    const embeds = document.querySelectorAll('embed');
    embeds.forEach(embed => {
      const src = embed.src || embed.getAttribute('data-src');
      if (src && (src.includes('.pdf') || src.includes('pdf'))) {
        pdfs.push({
          url: src,
          text: embed.title || embed.getAttribute('aria-label') || 'PDF i embed',
          type: 'embed_pdf',
          element: 'embed'
        });
        console.log('üìÑ Fant PDF i embed:', src);
      }
    });
    
    return pdfs;
  });
}

// Hjelpefunksjon for √• "force open" PDF fra viewer-sider
async function forceOpenPDFFromViewer(viewerUrl, browser) {
  console.log('üîÑ Fors√∏ker √• √•pne PDF fra viewer-side:', viewerUrl);
  
  try {
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    // Lytt til nettverksrespons for √• fange PDF-filer
    const pdfResponses = [];
    page.on('response', async (response) => {
      const url = response.url();
      const contentType = response.headers()['content-type'] || '';
      
      if (contentType.includes('application/pdf') || url.includes('.pdf')) {
        pdfResponses.push({
          url: url,
          contentType: contentType,
          status: response.status()
        });
        console.log('üìÑ Fanget PDF-respons fra viewer:', url);
      }
    });
    
    await page.goto(viewerUrl, { 
      waitUntil: 'networkidle0',
      timeout: 20000 
    });
    
    // Vent litt for √• fange eventuelle PDF-er
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // S√∏k etter PDF-er p√• viewer-siden
    const viewerPDFs = await findIframeAndObjectPDFs(page);
    
    // Pr√∏v √• klikke p√• nedlastingsknapper
    const downloadButtons = await page.evaluate(() => {
      const buttons = [];
      const selectors = [
        'a[href*=".pdf"]',
        'button[onclick*="download"]',
        'a[download]',
        '[class*="download"]',
        '[id*="download"]',
        'a[href*="download"]'
      ];
      
      selectors.forEach(selector => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(el => {
          if (el.href || el.getAttribute('onclick')) {
            buttons.push({
              url: el.href || el.getAttribute('onclick'),
              text: el.textContent.trim(),
              type: 'download_button'
            });
          }
        });
      });
      
      return buttons;
    });
    
    await page.close();
    
    // Kombiner alle funn
    const allPDFs = [...pdfResponses, ...viewerPDFs, ...downloadButtons];
    
    if (allPDFs.length > 0) {
      console.log('‚úÖ Fant PDF-er fra viewer-side:', allPDFs.length);
      return allPDFs;
    } else {
      console.log('‚ö†Ô∏è Ingen PDF-er funnet p√• viewer-siden');
      return [];
    }
    
  } catch (error) {
    console.error('‚ùå Feil ved force open PDF fra viewer:', error.message);
    return [];
  }
}

// Forbedret funksjon for √• finne salgsoppgaver via nettverkstrafikk og dokumentlenker
async function findSalgsoppgavePDF(page, url) {
  console.log('üîç === STARTER UTVIDET DOKUMENTS√òK ===');
  console.log('üîç Leter etter salgsoppgave p√•:', url);
  const finnCode = extractFinnCode(url);
  console.log('üè∑Ô∏è Finn-kode:', finnCode);
  
  try {
    const dokumenter = [];
    const nettverksResponser = [];
    
    // 1. Sett opp nettverkslyttere for √• fange API-kall og JSON-responsere
    page.on('response', async (response) => {
      const responseUrl = response.url();
      const contentType = response.headers()['content-type'] || '';
      
      try {
        // Se etter JSON-responser som kan inneholde dokument-data
        if (contentType.includes('application/json') && (
          responseUrl.includes('document') ||
          responseUrl.includes('pdf') ||
          responseUrl.includes('attachment') ||
          responseUrl.includes('file') ||
          responseUrl.includes('prospect') ||
          responseUrl.includes('salgsoppgave')
        )) {
          const jsonData = await response.json();
          nettverksResponser.push({
            url: responseUrl,
            data: jsonData,
            type: 'json'
          });
          console.log('üì° Fanget JSON-respons:', responseUrl);
        }
        
        // Se etter direkte PDF-responser
        if (contentType.includes('application/pdf') || responseUrl.includes('.pdf')) {
          nettverksResponser.push({
            url: responseUrl,
            type: 'pdf',
            contentType: contentType
          });
          console.log('üìÑ Fanget PDF-respons:', responseUrl);
        }
        
        // Se etter base64-encodede dokumenter i JSON
        if (contentType.includes('application/json')) {
          try {
            const text = await response.text();
            if (text.includes('base64') || text.includes('JVBERi')) { // JVBERi er starten p√• PDF i base64
              nettverksResponser.push({
                url: responseUrl,
                type: 'base64',
                data: text
              });
              console.log('üì¶ Fanget base64-dokument:', responseUrl);
            }
          } catch (e) {
            // Ignorer feil ved tekstlesing
          }
        }
      } catch (error) {
        // Ignorer feil ved JSON-parsing
      }
    });
    
    // 2. Se etter dokumentlenker i DOM med forbedret s√∏k
    const domLenker = await page.evaluate(() => {
      const lenker = [];
      
      // S√∏k etter alle lenker
      const alleAnker = document.querySelectorAll('a, button, [role="button"]');
      
      alleAnker.forEach(element => {
        const href = element.href || element.getAttribute('data-href') || element.getAttribute('onclick');
        const tekst = element.textContent.trim().toLowerCase();
        const ariaLabel = element.getAttribute('aria-label') || '';
        
        // Utvidede s√∏kekriterier for norske termer
        const dokumentTerm = [
          'salgsoppgave', 'prospekt', 'dokument', 'vedlegg', 'pdf',
          'takst', 'tilstandsrapport', 'energiattest', 'situasjonsplan',
          'plantegning', 'tegning', 'oversikt', 'faktaark', 'brosjyre',
          'last ned', 'download', 'vis dokument', '√•pne dokument'
        ];
        
        const harDokumentTerm = dokumentTerm.some(term => 
          tekst.includes(term) || ariaLabel.toLowerCase().includes(term)
        );
        
        if (href && harDokumentTerm) {
          lenker.push({
            url: href,
            text: tekst,
            ariaLabel: ariaLabel,
            type: 'dom_link'
          });
        }
        
        // Spesiell h√•ndtering for onclick-hendelser som kan √•pne dokumenter
        if (element.getAttribute('onclick') && harDokumentTerm) {
          const onclick = element.getAttribute('onclick');
          lenker.push({
            url: onclick,
            text: tekst,
            type: 'onclick'
          });
        }
      });
      
      // S√∏k etter data-attributter som kan peke p√• dokumenter
      const alleElementer = document.querySelectorAll('*');
      alleElementer.forEach(el => {
        const attributes = el.attributes;
        for (let i = 0; i < attributes.length; i++) {
          const attr = attributes[i];
          if (attr.name.startsWith('data-') && 
              (attr.value.includes('pdf') || 
               attr.value.includes('document') || 
               attr.value.includes('attachment'))) {
            lenker.push({
              url: attr.value,
              text: el.textContent.trim(),
              type: 'data_attribute',
              attribute: attr.name
            });
          }
        }
      });
      
      return lenker;
    });
    
    // **STEG 4**: Unng√• duplisering - opprett set for √• tracke URLs
    const seenUrls = new Set();
    const uniqueDokumenter = [];
    
    // Legg til DOM-lenker med duplikatsjekk
    for (const dokument of domLenker) {
      if (dokument.url && !seenUrls.has(dokument.url)) {
        seenUrls.add(dokument.url);
        uniqueDokumenter.push(dokument);
      } else if (dokument.url) {
        console.log('üö´ Hopper over duplikat dokument-URL:', dokument.url.substring(0, 80));
      }
    }
    
    dokumenter.push(...uniqueDokumenter);
    
    // 3. **NY FUNKSJONALITET**: S√∏k etter iframe/object/embed PDF-er
    console.log('üîç === S√òKER ETTER IFRAME/OBJECT PDF-ER ===');
    const iframePDFs = await findIframeAndObjectPDFs(page);
    if (iframePDFs.length > 0) {
      console.log('‚úÖ Fant PDF-er i iframe/object tags:', iframePDFs.length);
      
      // **STEG 4**: Legg til iframe PDF-er med duplikatsjekk
      for (const iframePDF of iframePDFs) {
        if (iframePDF.url && !seenUrls.has(iframePDF.url)) {
          seenUrls.add(iframePDF.url);
          dokumenter.push(iframePDF);
        } else if (iframePDF.url) {
          console.log('üö´ Hopper over duplikat iframe PDF-URL:', iframePDF.url.substring(0, 80));
        }
      }
    }
    
    // 4. Vent litt for √• fange opp nettverkstrafikk
    console.log('‚è≥ Venter p√• nettverkstrafikk...');
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 5. **FORBEDRET**: Test dokumentlenker med force opening for viewer-sider
    console.log('üîç === TESTER DOKUMENTLENKER MED FORCE OPENING ===');
    for (const lenke of domLenker.slice(0, 5)) { // √òkt til 5 lenker
      if (lenke.type === 'dom_link' && lenke.url.startsWith('http')) {
        try {
          console.log('üñ±Ô∏è Tester dokumentlenke:', lenke.text, '|', lenke.url.substring(0, 80));
          
          // F√∏rst valid√©r at dokumentet tilh√∏rer riktig eiendom
          const isValidDocument = await validateDocumentForProperty(lenke.url, url, page);
          
          if (!isValidDocument) {
            console.log('‚ùå Dokumentet tilh√∏rer ikke riktig eiendom - hopper over');
            continue;
          }
          
          // **NY LOGIKK**: Sjekk om dette ser ut til √• v√¶re en viewer-side
          const isViewerUrl = lenke.url.includes('viewer') || 
                             lenke.url.includes('document') || 
                             lenke.url.includes('prospekt') ||
                             lenke.text.includes('vis dokument') ||
                             lenke.text.includes('√•pne');
          
          if (isViewerUrl) {
            console.log('üîÑ Identifisert som viewer-side, fors√∏ker force opening...');
            const forcedPDFs = await forceOpenPDFFromViewer(lenke.url, page.browser());
            
            if (forcedPDFs.length > 0) {
              forcedPDFs.forEach(pdf => {
                                  // **STEG 4**: Legg til forced PDF-er med duplikatsjekk
                  if (pdf.url && !seenUrls.has(pdf.url)) {
                    seenUrls.add(pdf.url);
                    dokumenter.push({
                      ...pdf,
                      originalViewerUrl: lenke.url,
                      type: 'forced_pdf_from_viewer'
                    });
                  } else if (pdf.url) {
                    console.log('üö´ Hopper over duplikat forced PDF-URL:', pdf.url.substring(0, 80));
                  }
              });
              console.log('‚úÖ Fant PDF-er via force opening:', forcedPDFs.length);
            }
          } else {
            // Standard behandling for direkte lenker
            const linkPage = await page.browser().newPage();
            await linkPage.goto(lenke.url, { waitUntil: 'networkidle0', timeout: 15000 });
            
            // Se etter PDF-innhold, dokument-viewer, eller iframe/object
            const pageAnalysis = await linkPage.evaluate(() => {
              const hasIframe = document.querySelectorAll('iframe[src*="pdf"]').length > 0;
              const hasObject = document.querySelectorAll('object[data*="pdf"]').length > 0;
              const hasEmbed = document.querySelectorAll('embed[src*="pdf"]').length > 0;
              const hasViewer = document.body.textContent.toLowerCase().includes('viewer') || 
                               document.body.textContent.toLowerCase().includes('pdf');
              
              return {
                hasIframe,
                hasObject, 
                hasEmbed,
                hasViewer,
                contentPreview: document.body.textContent.substring(0, 500)
              };
            });
            
            if (pageAnalysis.hasIframe || pageAnalysis.hasObject || pageAnalysis.hasEmbed || pageAnalysis.hasViewer) {
              console.log('üìÑ Side har PDF-innhold, s√∏ker etter PDF-er...');
              
              // S√∏k etter PDF-er p√• denne siden ogs√•
              const sidePDFs = await findIframeAndObjectPDFs(linkPage);
              if (sidePDFs.length > 0) {
                // **STEG 4**: Legg til side PDF-er med duplikatsjekk
                sidePDFs.forEach(pdf => {
                  if (pdf.url && !seenUrls.has(pdf.url)) {
                    seenUrls.add(pdf.url);
                    dokumenter.push({
                      ...pdf,
                      originalLinkUrl: lenke.url,
                      type: 'pdf_from_link_page'
                    });
                  } else if (pdf.url) {
                    console.log('üö´ Hopper over duplikat side PDF-URL:', pdf.url.substring(0, 80));
                  }
                });
                console.log('‚úÖ Fant PDF-er p√• lenke-siden:', sidePDFs.length);
              }
              
              // **STEG 4**: Legg til verified document page med duplikatsjekk
              if (lenke.url && !seenUrls.has(lenke.url)) {
                seenUrls.add(lenke.url);
                dokumenter.push({
                  ...lenke,
                  type: 'verified_document_page',
                  pageAnalysis: pageAnalysis
                });
              } else if (lenke.url) {
                console.log('üö´ Hopper over duplikat verified document page-URL:', lenke.url.substring(0, 80));
              }
            }
            
            await linkPage.close();
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Feil ved testing av lenke:', lenke.url.substring(0, 50), error.message);
        }
      }
    }
    
    // 6. **STEG 4**: Kombiner alle funn med duplikatsjekk for nettverksresponser
    console.log('üîÑ === KOMBINERER DOKUMENTER OG NETTVERKSRESPONSER ===');
    
    // Legg til nettverksresponser med duplikatsjekk
    for (const nettverksRespons of nettverksResponser) {
      if (nettverksRespons.url && !seenUrls.has(nettverksRespons.url)) {
        seenUrls.add(nettverksRespons.url);
        dokumenter.push(nettverksRespons);
      } else if (nettverksRespons.url) {
        console.log('üö´ Hopper over duplikat nettverksrespons-URL:', nettverksRespons.url.substring(0, 80));
      }
    }
    
    // **STEG 5**: FORBEDRET LOGGING med detaljert statistikk
    const alleDokumenter = dokumenter; // Alle er n√• i dokumenter-array
    
    // Kategoriser dokumenter for bedre oversikt
    const kategorier = {
      'iframe_pdf': alleDokumenter.filter(d => d.type === 'iframe_pdf').length,
      'object_pdf': alleDokumenter.filter(d => d.type === 'object_pdf').length,
      'embed_pdf': alleDokumenter.filter(d => d.type === 'embed_pdf').length,
      'forced_pdf_from_viewer': alleDokumenter.filter(d => d.type === 'forced_pdf_from_viewer').length,
      'pdf_from_link_page': alleDokumenter.filter(d => d.type === 'pdf_from_link_page').length,
      'dom_link': alleDokumenter.filter(d => d.type === 'dom_link').length,
      'verified_document_page': alleDokumenter.filter(d => d.type === 'verified_document_page').length,
      'pdf': alleDokumenter.filter(d => d.type === 'pdf').length,
      'json': alleDokumenter.filter(d => d.type === 'json').length,
      'base64': alleDokumenter.filter(d => d.type === 'base64').length
    };
    
    // **STEG 5**: FORBEDRET LOGGING - detaljert oversikt over alle funn
    console.log('üìä === DOKUMENTS√òK KOMPLETT ===');
    console.log('üìä Totalt funnet dokumenter (etter duplikateliminering):', alleDokumenter.length);
    console.log('üìä Duplikater eliminert:', nettverksResponser.length + domLenker.length + (iframePDFs?.length || 0) - alleDokumenter.length);
    
    console.log('üìä Dokumentkategorier:');
    Object.entries(kategorier).forEach(([type, count]) => {
      if (count > 0) {
        console.log(`   - ${type}: ${count}`);
      }
    });
    
    // **STEG 5**: Logg ALLE dokumentkandidater for debugging
    if (alleDokumenter.length > 0) {
      console.log('üìÑ === ALLE DOKUMENTKANDIDATER FUNNET ===');
      alleDokumenter.forEach((dok, index) => {
        const urlPreview = (dok.url || 'Ingen URL').substring(0, 60);
        const textPreview = dok.text ? `(${dok.text.substring(0, 30)}...)` : '';
        console.log(`   ${index + 1}. Type: ${dok.type}`);
        console.log(`      URL: ${urlPreview}...`);
        console.log(`      Tekst: ${textPreview || 'Ingen tekst'}`);
        console.log(`      Element: ${dok.element || 'N/A'}`);
        console.log('      ---');
      });
      
      // **STEG 5**: Sammendrag av funn
      const pdfDokumenter = alleDokumenter.filter(d => 
        d.type === 'pdf' || 
        d.type === 'iframe_pdf' || 
        d.type === 'object_pdf' || 
        d.type === 'embed_pdf' || 
        d.type === 'forced_pdf_from_viewer' ||
        d.type === 'pdf_from_link_page'
      );
      const htmlDokumenter = alleDokumenter.filter(d => 
        d.type === 'verified_document_page' || 
        d.type === 'html_fallback'
      );
      const jsonDokumenter = alleDokumenter.filter(d => d.type === 'json' || d.type === 'base64');
      
      console.log('üìä === SAMMENDRAG AV DOKUMENTTYPER ===');
      console.log(`   üéØ PDF-dokumenter: ${pdfDokumenter.length} (beste kvalitet)`);
      console.log(`   üìÑ HTML-dokumenter: ${htmlDokumenter.length} (fallback kvalitet)`);
      console.log(`   üìã JSON/Data-dokumenter: ${jsonDokumenter.length}`);
      
      if (pdfDokumenter.length === 0) {
        console.log('‚ö†Ô∏è ADVARSEL: Ingen PDF-dokumenter funnet - kun HTML/JSON tilgjengelig');
        console.log('   Dette kan betydelig p√•virke kvaliteten p√• analysen');
      }
      
    } else {
      console.log('‚ùå === INGEN DOKUMENTER FUNNET ===');
      console.log('‚ùå Dette vil f√∏re til sv√¶rt begrenset analyse');
      console.log('‚ùå Mulige √•rsaker:');
      console.log('   - Salgsoppgave er ikke tilgjengelig offentlig');
      console.log('   - PDF er passordbeskyttet');
      console.log('   - Nettverksfeil eller blokkering');
      console.log('   - Ukjent megler-struktur');
    }
    
    return alleDokumenter;
    
  } catch (error) {
    console.error('‚ùå Feil ved s√∏k etter dokumenter:', error);
    return [];
  }
}

// Forbedret funksjon for √• laste ned og parse PDF med bedre feilh√•ndtering og cleanup
// **OCR FALLBACK FUNKSJON** - Konverterer PDF til bilder og kj√∏rer OCR
async function performOCROnPDF(pdfBuffer, numPages) {
  console.log('üîç === STARTER OCR FALLBACK ===');
  
  let pdf2pic, tesseract, fs, path;
  try {
    pdf2pic = require('pdf2pic');
    tesseract = require('tesseract.js');
    fs = require('fs');
    path = require('path');
  } catch (importError) {
    throw new Error('OCR avhengigheter ikke installert. Kj√∏r: npm i pdf2pic tesseract.js');
  }
  
  const tempDir = path.join(__dirname, 'temp_ocr');
  
  try {
    // Opprett temp-mappe
    fs.mkdirSync(tempDir, { recursive: true });
    
    // Konverter PDF til bilder (kun f√∏rste 3 sider for √• spare tid)
    const maxPages = Math.min(3, numPages || 1);
    console.log(`üìÑ Konverterer ${maxPages} sider til bilder for OCR...`);
    
    const convert = pdf2pic.fromBuffer(pdfBuffer, {
      density: 300,           // H√∏y oppl√∏sning for bedre OCR
      saveFilename: 'page',
      savePath: tempDir,
      format: 'png',
      width: 2480,           // A4 i 300 DPI
      height: 3508
    });
    
    let ocrText = '';
    const processedPages = [];
    
    // Behandle hver side
    for (let pageNum = 1; pageNum <= maxPages; pageNum++) {
      try {
        console.log(`üîç OCR behandler side ${pageNum}/${maxPages}...`);
        
        // Konverter side til bilde
        const imageResult = await convert(pageNum, { responseType: 'image' });
        const imagePath = imageResult.path;
        
        if (!fs.existsSync(imagePath)) {
          console.log(`‚ùå Bilde ikke opprettet for side ${pageNum}`);
          continue;
        }
        
        // Kj√∏r OCR med norsk og engelsk spr√•kst√∏tte
        const { data: { text, confidence } } = await tesseract.recognize(imagePath, 'nor+eng', {
          logger: m => {
            if (m.status === 'recognizing text') {
              console.log(`   üì± OCR side ${pageNum}: ${Math.round(m.progress * 100)}%`);
            }
          },
          tessedit_pageseg_mode: 6,  // Uniform text block
          preserve_interword_spaces: 1,
          tessedit_char_whitelist: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz√¶√∏√•√Ü√ò√Ö0123456789 .,;:!?-()[]{}/*&%$#@+=<>|\\n\\t'
        });
        
        if (text && text.length > 30) {
          const cleanedText = text
            .replace(/\n{3,}/g, '\n\n')  // Reduser multiple line breaks
            .replace(/\s{3,}/g, ' ')     // Reduser multiple spaces
            .trim();
            
          ocrText += `\n--- SIDE ${pageNum} ---\n${cleanedText}`;
          processedPages.push({
            page: pageNum,
            textLength: cleanedText.length,
            confidence: Math.round(confidence)
          });
          
          console.log(`‚úÖ OCR side ${pageNum}: ${cleanedText.length} tegn (${Math.round(confidence)}% konfidens)`);
        } else {
          console.log(`‚ö†Ô∏è OCR side ${pageNum}: Utilstrekkelig tekst ekstrahert`);
        }
        
        // Rydd opp bildefil
        try {
          fs.unlinkSync(imagePath);
        } catch (cleanupError) {
          console.log(`‚ö†Ô∏è Kunne ikke slette temp-fil: ${imagePath}`);
        }
        
      } catch (pageError) {
        console.log(`‚ùå OCR feilet for side ${pageNum}:`, pageError.message);
      }
    }
    
    // Logg sammendrag
    if (processedPages.length > 0) {
      const avgConfidence = processedPages.reduce((sum, p) => sum + p.confidence, 0) / processedPages.length;
      console.log(`üéØ OCR sammendrag: ${processedPages.length}/${maxPages} sider, ${ocrText.length} tegn totalt, ${Math.round(avgConfidence)}% gjennomsnittlig konfidens`);
    }
    
    return ocrText.length > 0 ? ocrText : null;
    
  } finally {
    // Rydd opp temp-mappe
    try {
      if (fs.existsSync(tempDir)) {
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log('üßπ OCR temp-filer ryddet opp');
      }
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è Kunne ikke rydde OCR temp-mappe:', cleanupError.message);
    }
  }
}

async function downloadAndParsePDF(pdfUrl, browser) {
  console.log('üì• === LASTER NED PDF ===');
  console.log('üì• URL:', pdfUrl);
  
  let page = null;
  
  try {
    page = await browser.newPage();
    
    // Sett user agent for √• unng√• blokkering
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    // √òkt timeout og feilh√•ndtering
    const response = await page.goto(pdfUrl, { 
      waitUntil: 'networkidle0',
      timeout: 45000 // √òkt til 45 sekunder for store PDF-er
    });
    
    if (!response) {
      throw new Error('Ingen respons fra server');
    }
    
    if (!response.ok()) {
      throw new Error(`HTTP ${response.status()}: ${response.statusText()}`);
    }
    
    // Sjekk content-type
    const contentType = response.headers()['content-type'] || '';
    if (!contentType.includes('application/pdf') && !pdfUrl.includes('.pdf')) {
      console.log('‚ö†Ô∏è Content-type er ikke PDF:', contentType);
      console.log('‚ö†Ô∏è Pr√∏ver likevel √• parse som PDF...');
    }
    
    const buffer = await response.buffer();
    
    if (buffer.length === 0) {
      throw new Error('Tom PDF-fil mottatt');
    }
    
    console.log('‚úÖ PDF lastet ned');
    console.log('üìä Filst√∏rrelse:', buffer.length, 'bytes');
    console.log('üìä Content-Type:', contentType);
    
    // **FORBEDRET PDF PARSING MED BEDRE FEILH√ÖNDTERING**
    let pdfData;
    try {
      pdfData = await pdfParse(buffer);
      console.log('üìñ PDF parsing fullf√∏rt');
      console.log('üìä Antall sider:', pdfData.numpages);
      console.log('üìä Tekstlengde:', pdfData.text.length, 'tegn');
      
      // **FORBEDRET PDF-TEKSTH√ÖNDTERING MED OCR FALLBACK**
      if (pdfData.text.length < 100) {
        console.log('‚ö†Ô∏è PDF har utilstrekkelig tekst, starter OCR-fallback...');
        console.log('üìä Opprinnelig tekstlengde:', pdfData.text.length);
        
        // Pr√∏v OCR som fallback
        try {
          const ocrText = await performOCROnPDF(buffer, pdfData.numpages);
          if (ocrText && ocrText.length > pdfData.text.length) {
            console.log(`üéØ OCR forbedret tekst: ${pdfData.text.length} ‚Üí ${ocrText.length} tegn`);
            pdfData.text = ocrText;
            pdfData._ocrEnhanced = true;
            pdfData._ocrImprovement = ocrText.length - (pdfData.text?.length || 0);
          } else {
            console.log('‚ö†Ô∏è OCR ga ikke bedre resultat');
          }
        } catch (ocrError) {
          console.log('‚ùå OCR fallback feilet:', ocrError.message);
          
          // Hvis fortsatt for lite tekst, gi detaljert feilmelding
          if (pdfData.text.length < 50) {
            const metadata = pdfData.info || {};
            console.log('üìä PDF metadata:', JSON.stringify(metadata, null, 2));
            
            if (pdfData.text.length === 0) {
              throw new Error('PDF inneholder ingen lesbar tekst (kan v√¶re scannet dokument eller passordbeskyttet)');
            }
          }
        }
      }
      
    } catch (pdfError) {
      console.error('‚ùå PDF parsing feilet:', pdfError.message);
      
      // Pr√∏v √• gi mer spesifikk feilmelding
      if (pdfError.message.includes('Invalid PDF')) {
        throw new Error('Ugyldig PDF-format - filen kan v√¶re korrupt eller ikke v√¶re en ekte PDF');
      } else if (pdfError.message.includes('Password')) {
        throw new Error('PDF er passordbeskyttet og kan ikke leses');
      } else {
        throw new Error(`PDF parsing feilet: ${pdfError.message}`);
      }
    }
    
    return {
      success: true,
      text: pdfData.text,
      numPages: pdfData.numpages,
      info: pdfData.info,
      metadata: pdfData.metadata,
      source: 'pdf_download',
      sourceUrl: pdfUrl,
      fileSize: buffer.length
    };
    
  } catch (error) {
    console.error('‚ùå === PDF NEDLASTING FEILET ===');
    console.error('‚ùå URL:', pdfUrl);
    console.error('‚ùå Feil:', error.message);
    console.error('‚ùå Type:', error.constructor.name);
    
    throw new Error(`PDF nedlasting/parsing feilet: ${error.message}`);
  } finally {
    // **STEG 4**: Alltid lukk siden for √• unng√• minnelekkasje
    if (page) {
      try {
        await page.close();
        console.log('üßπ PDF-side lukket');
      } catch (closeError) {
        console.error('‚ö†Ô∏è Kunne ikke lukke PDF-side:', closeError.message);
      }
    }
  }
}

// **FORBEDRET BRA-EKSTRAKSJONSLOGIKK** - Intelligent 4-fase prioritering
function extractBRAWithPriority(salgsoppgaveText) {
  console.log('üéØ === FORBEDRET BRA-EKSTRAKSJON STARTER ===');
  
  if (!salgsoppgaveText || salgsoppgaveText.length < 50) {
    console.log('‚ö†Ô∏è Ikke nok tekst for BRA-ekstraksjon');
    return null;
  }

  const arealCandidates = [];
  
  // FASE 1: Definer s√∏kem√∏nstre med prioritetspoeng
  const patterns = [
    // H√∏yest prioritet - eksakte BRA-betegnelser
    { regex: /(?:^|\n)\s*(?:bruksareal|^bra)[\s\n]*:?\s*(\d{1,4})\s*(?:m¬≤|m2|kvm)?/gi, priority: 100, label: 'bruksareal' },
    { regex: /(?:^|\n)\s*(?:prim√¶rareal|p-rom)[\s\n]*:?\s*(\d{1,4})\s*(?:m¬≤|m2|kvm)?/gi, priority: 90, label: 'prim√¶rareal' },
    
    // Medium prioritet - mer spesifikke m√∏nstre
    { regex: /boligen\s+(?:har|er)(?:\s+p√•)?\s*(\d{1,4})\s*(?:m¬≤|m2|kvm)/gi, priority: 70, label: 'boligst√∏rrelse' },
    { regex: /(\d{1,4})\s*(?:m¬≤|m2|kvm)\s+(?:bruksareal|bra|bolig)/gi, priority: 80, label: 'bruksareal_omvendt' },
    
    // Lavest prioritet - generelle areal-m√∏nstre  
    { regex: /(?:^|\n)\s*(?:areal|st√∏rrelse)[\s\n]*:?\s*(\d{1,4})\s*(?:m¬≤|m2|kvm)/gi, priority: 50, label: 'generelt_areal' },
  ];
  
  // FASE 2: Filtrer ut u√∏nskede m√∏nstre F√òRST
  const excludePatterns = [
    /(?:internt|eksternt|bra-[ie]|utvendig|takterrasse|balkong|terrasse|garasje|kjeller(?!.*bra)|loft(?!.*bra)|tomt)/i
  ];
  
  // FASE 3: Samle alle kandidater
  patterns.forEach(({ regex, priority, label }) => {
    let match;
    while ((match = regex.exec(salgsoppgaveText)) !== null) {
      const fullMatch = match[0];
      const value = parseInt(match[1], 10);
      
      // Hopp over hvis matcher ekskluderte m√∏nstre
      if (excludePatterns.some(exclude => exclude.test(fullMatch))) {
        console.log(`‚ùå Ekskludert: "${fullMatch.trim()}" (u√∏nsket type)`);
        continue;
      }
      
      // Kun realistiske st√∏rrelser
      if (value >= 15 && value <= 1500) {
        arealCandidates.push({
          value,
          priority,
          label,
          context: fullMatch.trim(),
          position: match.index
        });
        console.log(`‚úÖ Kandidat: ${value}m¬≤ (${label}, prioritet: ${priority})`);
      } else {
        console.log(`‚ùå Unrealistisk st√∏rrelse: ${value}m¬≤`);
      }
    }
  });
  
  if (arealCandidates.length === 0) {
    console.log('‚ùå Ingen gyldige BRA-kandidater funnet');
    return null;
  }
  
  // FASE 4: Intelligent prioritering og duplikat-fjerning
  const grouped = arealCandidates.reduce((acc, candidate) => {
    const key = candidate.value;
    if (!acc[key] || acc[key].priority < candidate.priority) {
      acc[key] = candidate;
    }
    return acc;
  }, {});
  
  // Velg beste kandidat basert p√• prioritet og realisme
  const best = Object.values(grouped)
    .sort((a, b) => {
      // F√∏rst etter prioritet, s√• etter hvor typisk st√∏rrelsen er (40-200m¬≤ er mest vanlig)
      const aPriorityBonus = a.priority;
      const bPriorityBonus = b.priority;
      const aTypicalBonus = (a.value >= 40 && a.value <= 200) ? 10 : 0;
      const bTypicalBonus = (b.value >= 40 && b.value <= 200) ? 10 : 0;
      
      return (bPriorityBonus + bTypicalBonus) - (aPriorityBonus + aTypicalBonus);
    })[0];
  
  console.log(`üéØ BRA-ekstraksjonsresultat:`, {
    funnetKandidater: arealCandidates.length,
    unikkeCandidater: Object.keys(grouped).length,
    valgtVerdi: best.value,
    prioritet: best.priority,
    kontekst: best.context
  });
  
  return {
    bruksareal: `${best.value} m¬≤`,
    _metadata: {
      confidence: best.priority,
      source: best.label,
      context: best.context,
      alternativeCandidates: Object.values(grouped).length
    }
  };
}

// **STEG 4**: Hjelpefunksjon for cleanup av midlertidige filer
function cleanupTempFile(filePath) {
  if (!filePath) return;
  
  try {
    const fs = require('fs');
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      const fileName = filePath.substring(filePath.lastIndexOf('/') + 1);
      console.log('üóëÔ∏è Midlertidig fil ryddet opp:', fileName);
      return true;
    }
    return false;
  } catch (cleanupError) {
    console.error('‚ö†Ô∏è Kunne ikke slette midlertidig fil:', cleanupError.message);
    return false;
  }
}

// **STEG 4**: Funksjon for √• rydde opp alle midlertidige filer fra denne √∏kten
function cleanupAllTempFiles() {
  try {
    const fs = require('fs');
    const path = require('path');
    const os = require('os');
    
    const tempDir = os.tmpdir();
    const files = fs.readdirSync(tempDir);
    
    // Finn alle bolig-scraper temp-filer
    const boligScraperFiles = files.filter(file => 
      file.startsWith('bolig_scraper_') || 
      file.startsWith('temp_pdf_') ||
      file.includes('boligplattform')
    );
    
    if (boligScraperFiles.length > 0) {
      console.log('üßπ === RYDDER OPP MIDLERTIDIGE FILER ===');
      let cleaned = 0;
      
      boligScraperFiles.forEach(file => {
        try {
          const filePath = path.join(tempDir, file);
          const stats = fs.statSync(filePath);
          
          // Slett filer som er eldre enn 1 time
          const oneHourAgo = Date.now() - (60 * 60 * 1000);
          if (stats.mtime.getTime() < oneHourAgo) {
            fs.unlinkSync(filePath);
            cleaned++;
            console.log('üóëÔ∏è Slettet gammel temp-fil:', file);
          }
        } catch (error) {
          console.error('‚ö†Ô∏è Kunne ikke slette:', file, error.message);
        }
      });
      
      console.log(`üßπ Ryddet opp ${cleaned} midlertidige filer`);
    }
  } catch (error) {
    console.error('‚ö†Ô∏è Generell feil ved opprydding:', error.message);
  }
}

// **HOVEDFUNKSJON for √• ekstraktere strukturerte fakta fra salgsoppgave**
// VIKTIG: Salgsoppgaven er ALLTID hovedkilden - denne data skal prioriteres over scraping
function extractSalgsoppgaveFakta(salgsoppgaveText) {
  console.log('üìã Ekstraherer strukturerte fakta fra salgsoppgave (HOVEDKILDE)');
  
  if (!salgsoppgaveText || salgsoppgaveText.length < 50) {
    console.log('‚ö†Ô∏è Ingen salgsoppgave-tekst √• analysere');
    return {};
  }
  
  const fakta = {};
  const text = salgsoppgaveText.toLowerCase();
  
  // **ANTALL SOVEROM** - omfattende regex-m√∏nstre
  const soveromm√∏nstre = [
    // Standard m√∏nstre
    /(?:antall\s+)?soverom[\s\n]*:?\s*(\d+)/i,
    /(\d+)\s*soverom/i,
    /(\d+)\s*stk\s*soverom/i,
    /(\d+)\s*soverom\s*(?:i\s*alt|totalt)/i,
    // Sov-rom varianter
    /sov-rom[\s\n]*:?\s*(\d+)/i,
    /sov\.?rom[\s\n]*:?\s*(\d+)/i,
    /(\d+)\s*sov\.?rom/i,
    /(\d+)\s*sovrom/i,
    // Fra beskrivelser
    /(?:har|med|inkludert)\s*(\d+)\s*soverom/i,
    /(\d+)\s*(?:store?|sm√•?|doble?)\s*soverom/i,
    /boligen\s+har\s*(\d+)\s*soverom/i,
    // Med parenteser
    /soverom\s*\((\d+)\)/i,
    /(\d+)[-/]soverom/i
  ];
  
  for (const pattern of soveromm√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1] && parseInt(match[1]) > 0 && parseInt(match[1]) < 20) {
      fakta.antallSoverom = match[1];
      console.log(`üéØ Fant antall soverom fra salgsoppgave: ${match[1]} (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
      break;
    }
  }
  
  // **ANTALL ROM** - omfattende regex-m√∏nstre
  const romm√∏nstre = [
    // Standard m√∏nstre
    /(?:antall\s+)?rom[\s\n]*:?\s*(\d+)/i,
    /(\d+)\s*rom(?!\s*leilighet)/i,
    /(\d+)\s*stk\s*rom/i,
    /(\d+)\s*rom\s*(?:i\s*alt|totalt)/i,
    // P-rom (prim√¶rrom)
    /p-rom[\s\n]*:?\s*(\d+)/i,
    /prim√¶rrom[\s\n]*:?\s*(\d+)/i,
    // Fra beskrivelser
    /(\d+)-roms?\s*(?:leilighet|bolig)/i,
    /boligen\s+har\s*(\d+)\s*rom/i,
    /(?:har|med|inkludert)\s*(\d+)\s*rom/i,
    // Romfordeling
    /romfordeling[\s\S]*?(\d+)\s*rom/i,
    // Med parenteser
    /rom\s*\((\d+)\)/i,
    /(\d+)[-/]roms?/i
  ];
  
  for (const pattern of romm√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1] && parseInt(match[1]) > 0 && parseInt(match[1]) < 50) {
      fakta.antallRom = match[1];
      console.log(`üéØ Fant antall rom fra salgsoppgave: ${match[1]} (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
      break;
    }
  }
  
  // **FORBEDRET BRUKSAREAL-EKSTRAKSJON** - Bruker ny intelligent 4-fase prioritering
  const braResult = extractBRAWithPriority(salgsoppgaveText);
  if (braResult && braResult.bruksareal) {
    fakta.bruksareal = braResult.bruksareal;
    fakta._braMetadata = braResult._metadata;
    console.log(`üéØ Korrekt BRA funnet via forbedret logikk: ${braResult.bruksareal} (konfidens: ${braResult._metadata.confidence})`);
  }
  
  // **BOLIGTYPE** - omfattende regex-m√∏nstre
  const boligtypem√∏nstre = [
    /boligtype[\s\n]*:?\s*(leilighet|enebolig|tomannsbolig|rekkehus|g√•rdsbruk|villa|hytte)/i,
    /(?:^|\n|\.)\s*(leilighet|enebolig|tomannsbolig|rekkehus|g√•rdsbruk|villa|hytte)(?:\s|$|\.)/i,
    /(\d+-roms?\s*(?:leilighet|enebolig|villa))/i,
    /type[\s\n]*:?\s*(leilighet|enebolig|tomannsbolig|rekkehus|g√•rdsbruk|villa|hytte)/i
  ];
  
  for (const pattern of boligtypem√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1] && match[1].trim().length > 2) {
      fakta.boligtype = match[1].trim();
      console.log(`üéØ Fant boligtype fra salgsoppgave: ${match[1]} (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
      break;
    }
  }
  
  // **BYGGE√ÖR** - omfattende regex-m√∏nstre
  const bygge√•rm√∏nstre = [
    /bygge√•r[\s\n]*:?\s*(\d{4})/i,
    /bygget[\s\n]*:?\s*(\d{4})/i,
    /oppf√∏rt[\s\n]*:?\s*(\d{4})/i,
    /fra\s+(\d{4})/i,
    /(?:^|\n|\.)\s*(\d{4})(?:\s|$|\.)/,
    /bygge√•r[\s\n]*:?\s*ca\.?\s*(\d{4})/i,
    /bygget\s+(?:i|ca\.?)\s*(\d{4})/i
  ];
  
  for (const pattern of bygge√•rm√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1]) {
      const year = parseInt(match[1]);
      if (year >= 1800 && year <= new Date().getFullYear() + 5) {
        fakta.byggeaar = match[1];
        console.log(`üéØ Fant bygge√•r fra salgsoppgave: ${match[1]} (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
        break;
      }
    }
  }
  
  // **ADRESSE** - omfattende regex-m√∏nstre
  const adressem√∏nstre = [
    // Standard norsk adresse
    /([A-Z√Ü√ò√Ö][a-z√¶√∏√•\s]+\s+\d+[A-Za-z]?,\s+\d{4}\s+[A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/,
    /adresse[\s\n]*:?\s*([A-Z√Ü√ò√Ö][a-z√¶√∏√•\s]+\s+\d+[A-Za-z]?,\s+\d{4}\s+[A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/i,
    /beliggenhet[\s\n]*:?\s*([A-Z√Ü√ò√Ö][a-z√¶√∏√•\s]+\s+\d+[A-Za-z]?,\s+\d{4}\s+[A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/i
  ];
  
  for (const pattern of adressem√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1] && match[1].trim().length > 10 && match[1].includes(',')) {
      fakta.adresse = match[1].trim();
      console.log(`üéØ Fant adresse fra salgsoppgave: ${match[1]} (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
      break;
    }
  }
  
  // **PRIS/PRISANTYDNING** - omfattende regex-m√∏nstre
  const prism√∏nstre = [
    /prisantydning[\s\n]*:?\s*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
    /pris[\s\n]*:?\s*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
    /kr\.?\s*(\d{1,3}(?:\s\d{3})*)/i,
    /(\d{1,3}(?:\s\d{3})*)\s*kr(?!\s*\/)/i,
    /(?:^|\n|\.)\s*(\d{1,3}(?:\s\d{3})*)\s*(?:000\s*)?kr/i
  ];
  
  for (const pattern of prism√∏nstre) {
    const match = salgsoppgaveText.match(pattern);
    if (match && match[1]) {
      const priceNum = parseInt(match[1].replace(/\s/g, ''));
      if (priceNum >= 100000 && priceNum <= 100000000) { // Mellom 100k og 100M
        fakta.pris = match[1] + ' kr';
        console.log(`üéØ Fant pris fra salgsoppgave: ${match[1]} kr (m√∏nster: ${pattern.toString().substring(0,50)}...)`);
        break;
      }
    }
  }
  
  console.log('‚úÖ Ekstraherte salgsoppgave-fakta:', Object.keys(fakta));
  return fakta;
}

// **FUNKSJON FOR √Ö SL√Ö SAMMEN DATA MED PRIORITERING AV SALGSOPPGAVE**
// VIKTIG: Salgsoppgave-data skal ALLTID prioriteres over scraping-data
function combineDataWithSalgsoppgavePriority(scrapingData, salgsoppgaveFakta) {
  console.log('üîÑ === SL√ÖR SAMMEN DATA - PRIORITERER SALGSOPPGAVE ===');
  console.log('üìä Scraping-data felter:', Object.keys(scrapingData || {}));
  console.log('üìã Salgsoppgave-fakta felter:', Object.keys(salgsoppgaveFakta || {}));
  
  // Start med scraping-data som base
  const combinedData = { ...scrapingData };
  
  // Oversett/map salgsoppgave-felter til riktige felt-navn
  const fieldMapping = {
    antallSoverom: 'antallSoverom',
    antallRom: 'antallRom', 
    bruksareal: 'bruksareal',
    boligtype: 'boligtype',
    byggeaar: 'byggeaar',
    adresse: 'adresse',
    pris: 'pris'
  };
  
  let overriddenFields = [];
  
  // **FORBEDRET VALIDERING**: Filtrer bort interne/eksterne arealer f√∏r bruk
  if (salgsoppgaveFakta && salgsoppgaveFakta.bruksareal) {
    if (/(?:internt|eksternt|bra-[ie])/i.test(salgsoppgaveFakta.bruksareal)) {
      console.log('‚ö†Ô∏è Fjerner intern/ekstern BRA som ikke er hovedareal:', salgsoppgaveFakta.bruksareal);
      delete salgsoppgaveFakta.bruksareal;
      delete salgsoppgaveFakta._braMetadata;
    }
  }

  // Overstyr med salgsoppgave-data der det finnes (HOVEDKILDE)
  for (const [salgsoppgaveField, targetField] of Object.entries(fieldMapping)) {
    if (salgsoppgaveFakta && salgsoppgaveFakta[salgsoppgaveField]) {
      const oldValue = combinedData[targetField];
      combinedData[targetField] = salgsoppgaveFakta[salgsoppgaveField];
      
      if (oldValue && oldValue !== salgsoppgaveFakta[salgsoppgaveField]) {
        overriddenFields.push(`${targetField}: "${oldValue}" ‚Üí "${salgsoppgaveFakta[salgsoppgaveField]}"`);
        console.log(`üéØ OVERSTYR ${targetField}: "${oldValue}" ‚Üí "${salgsoppgaveFakta[salgsoppgaveField]}" (fra salgsoppgave)`);
      } else {
        console.log(`‚úÖ LEGG TIL ${targetField}: "${salgsoppgaveFakta[salgsoppgaveField]}" (fra salgsoppgave)`);
      }
    }
  }
  
  // Legg til metadata om datakilde
  combinedData._dataKilde = {
    hovedkilde: 'salgsoppgave',
    fallback: 'scraping',
    overstyrteFelter: overriddenFields,
    salgsoppgaveFelter: Object.keys(salgsoppgaveFakta || {}),
    scrapingFelter: Object.keys(scrapingData || {}),
    timestamp: new Date().toISOString()
  };
  
  console.log('‚úÖ Data sammensl√•tt. Overstyrte felter:', overriddenFields.length);
  return combinedData;
}

// **FORBEDRET FUNKSJON** for √• ekstrahere detaljert info fra salgsoppgave-tekst for chat-bot
function extractDetailedInfo(salgsoppgaveText) {
  console.log('üìã Ekstraherer detaljert info for chat-bot (FORBEDRET MED ROMST√òRRELSER)');
  
  const info = {};
  const text = salgsoppgaveText.toLowerCase();
  
  // **NYT: EKSTRAHERING AV SPESIFIKKE ROM MED ST√òRRELSER**
  info.romInformasjon = extractRoomDetails(salgsoppgaveText);
  
  // **UTVIDET: Beskrivelse av innvendige rom**
  const innvendigSeksjon = extractSectionContent(salgsoppgaveText, ['beskrivelse - innvendig', 'innvendig', 'beskrivelse innvendig', 'romfordeling']);
  if (innvendigSeksjon) {
    info.innvendigBeskrivelse = innvendigSeksjon;
  }
  
  // **UTVIDET: Tekniske installasjoner**
  const tekniskeSeksjon = extractSectionContent(salgsoppgaveText, ['tekniske installasjoner', 'installasjoner', 'teknisk', 'vann og avl√∏p']);
  if (tekniskeSeksjon) {
    info.tekniskeInstallasjoner = tekniskeSeksjon;
  }
  
  // Parkering - utvidet s√∏k
  const parkeringContext = extractContextualInfo(salgsoppgaveText, ['parkering', 'garasje', 'bil', 'parkere'], 300);
  if (parkeringContext) {
    info.parkering = parkeringContext;
  }
  
  // Oppvarming - utvidet s√∏k
  const oppvarmingContext = extractContextualInfo(salgsoppgaveText, ['oppvarming', 'varme', 'fyring', 'elektrisk oppvarming', 'varmepumpe', 'fjernvarme'], 300);
  if (oppvarmingContext) {
    info.oppvarming = oppvarmingContext;
  }
  
  // Ventilasjon
  const ventilasjonContext = extractContextualInfo(salgsoppgaveText, ['ventilasjon', 'lufting', 'mekanisk ventilasjon', 'ventilasjonsanlegg'], 200);
  if (ventilasjonContext) {
    info.ventilasjon = ventilasjonContext;
  }
  
  // Teknisk tilstand - utvidet
  const tekniskTilstandContext = extractContextualInfo(salgsoppgaveText, ['teknisk tilstand', 'tilstandsgrad', 'standard', 'vedlikeholdsbehov'], 400);
  if (tekniskTilstandContext) {
    info.tekniskTilstand = tekniskTilstandContext;
  }
  
  // Baderom - utvidet med st√∏rrelse
  const baderomContext = extractContextualInfo(salgsoppgaveText, ['baderom', 'bad ', 'dusj', 'toalett', 'wc'], 300);
  if (baderomContext) {
    info.baderom = baderomContext;
  }
  
  // Kj√∏kken - utvidet med st√∏rrelse
  const kjokkenContext = extractContextualInfo(salgsoppgaveText, ['kj√∏kken', 'k√∏kken', 'kj√∏kkenet'], 300);
  if (kjokkenContext) {
    info.kjokken = kjokkenContext;
  }
  
  // Balkong/terrasse - utvidet
  const uteplassContext = extractContextualInfo(salgsoppgaveText, ['balkong', 'terrasse', 'uteplass', 'loggia'], 200);
  if (uteplassContext) {
    info.balkongTerrasse = uteplassContext;
  }
  
  // Energi - utvidet
  const energiContext = extractContextualInfo(salgsoppgaveText, ['energi', 'str√∏m', 'el-', 'energimerking', 'energiklasse'], 200);
  if (energiContext) {
    info.energi = energiContext;
  }
  
  // Vedlikehold - utvidet
  const vedlikeholdContext = extractContextualInfo(salgsoppgaveText, ['vedlikehold', 'oppussing', 'rehabilitering', 'renovering', 'oppgradert'], 300);
  if (vedlikeholdContext) {
    info.vedlikehold = vedlikeholdContext;
  }
  
  // **NYT: Felleskostnader og √∏konomi**
  const okonomiContext = extractContextualInfo(salgsoppgaveText, ['felleskostnad', 'kommunale avgifter', 'eiendomsskatt', 'fellesgjeld'], 400);
  if (okonomiContext) {
    info.okonomi = okonomiContext;
  }
  
  console.log('‚úÖ Ekstraherte detaljert info:', Object.keys(info));
  console.log('üìä Antall rom funnet:', Object.keys(info.romInformasjon || {}).length);
  return info;
}

// **NY HJELPEFUNKSJON**: Ekstraherer rom-detaljer med st√∏rrelser
function extractRoomDetails(text) {
  const romInfo = {};
  
  // Avanserte m√∏nstre for rom med st√∏rrelser
  const romM√∏nstre = [
    // Format: "Soverom (11,2 m¬≤)" eller "Soverom 11,2 m¬≤"
    /(?:^|\n)\s*([A-Za-z√¶√∏√•√Ü√ò√Ö\/]+(?:\s+\d+)?)\s*(?:\(|:)?\s*(\d+[,.]?\d*)\s*m[¬≤2]\s*(?:\)|$)/gim,
    // Format: "Entr√© 3,0 m¬≤"
    /(?:^|\n)\s*([A-Za-z√¶√∏√•√Ü√ò√Ö\/]+)\s+(\d+[,.]?\d*)\s*m[¬≤2]/gim,
    // Format: "Soverom: 11,2 m¬≤"
    /([A-Za-z√¶√∏√•√Ü√ò√Ö\/]+)\s*:\s*(\d+[,.]?\d*)\s*m[¬≤2]/gim,
    // Format i beskrivelse som "Stue/kj√∏kken (29,5 m¬≤)"
    /([A-Za-z√¶√∏√•√Ü√ò√Ö\/]+(?:\s*\/\s*[A-Za-z√¶√∏√•√Ü√ò√Ö\/]+)?)\s*\(\s*(\d+[,.]?\d*)\s*m[¬≤2]\s*\)/gim
  ];
  
  for (const pattern of romM√∏nstre) {
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const romNavn = match[1].trim().toLowerCase();
      const st√∏rrelse = parseFloat(match[2].replace(',', '.'));
      
      // Filtrer bort ugyldige st√∏rrelser
      if (st√∏rrelse > 0.5 && st√∏rrelse < 200) {
        // Normaliser romnavn
        const normalizedName = normalizeRoomName(romNavn);
        if (normalizedName) {
          romInfo[normalizedName] = {
            originalNavn: match[1].trim(),
            st√∏rrelse: st√∏rrelse,
            enhet: 'm¬≤',
            funnetM√∏nster: pattern.toString().substring(0, 50) + '...'
          };
        }
      }
    }
  }
  
  return romInfo;
}

// **NY HJELPEFUNKSJON**: Normaliser romnavn
function normalizeRoomName(romNavn) {
  const navn = romNavn.toLowerCase().trim();
  
  // Mapping av vanlige rom-varianter
  const romMapping = {
    'entr√©': 'entr√©',
    'entre': 'entr√©',
    'soverom': 'soverom',
    'sovrom': 'soverom',
    'sov-rom': 'soverom',
    'bad': 'bad',
    'baderom': 'bad',
    'stue': 'stue',
    'stue/kj√∏kken': 'stue_kj√∏kken',
    'stue kj√∏kken': 'stue_kj√∏kken',
    'kj√∏kken': 'kj√∏kken',
    'k√∏kken': 'kj√∏kken',
    'gang': 'gang',
    'bod': 'bod',
    'wc': 'wc',
    'toalett': 'wc',
    'vaskerom': 'vaskerom',
    'kontor': 'kontor',
    'arbeidsrom': 'kontor',
    'garderobe': 'garderobe',
    'walk-in closet': 'garderobe',
    'balkong': 'balkong',
    'terrasse': 'terrasse',
    'veranda': 'veranda'
  };
  
  // Sjekk direkte mapping f√∏rst
  if (romMapping[navn]) {
    return romMapping[navn];
  }
  
  // Sjekk delvis matching
  for (const [key, value] of Object.entries(romMapping)) {
    if (navn.includes(key) || key.includes(navn)) {
      return value;
    }
  }
  
  // Returner originalnavnet hvis ikke funnet i mapping
  if (navn.length > 2 && navn.length < 30) {
    return navn;
  }
  
  return null;
}

// **NY HJELPEFUNKSJON**: Ekstraherer kontekstuell informasjon
function extractContextualInfo(text, searchTerms, contextLength = 200) {
  const lowerText = text.toLowerCase();
  
  for (const term of searchTerms) {
    const index = lowerText.indexOf(term.toLowerCase());
    if (index !== -1) {
      const start = Math.max(0, index - 50);
      const end = Math.min(text.length, index + contextLength);
      return text.substring(start, end).trim();
    }
  }
  
  return null;
}

// **NY HJELPEFUNKSJON**: Ekstraherer innhold fra spesifikke seksjoner
function extractSectionContent(text, sectionTitles) {
  const lowerText = text.toLowerCase();
  
  for (const title of sectionTitles) {
    const titleIndex = lowerText.indexOf(title.toLowerCase());
    if (titleIndex !== -1) {
      // Finn slutten av seksjonen (neste store tittel eller maks 800 tegn)
      const sectionStart = titleIndex;
      let sectionEnd = text.length;
      
      // Se etter neste seksjon
      const nextSectionPattern = /\n\s*[A-Z√Ü√ò√Ö][A-Za-z√¶√∏√•\s]{10,50}\s*\n/g;
      nextSectionPattern.lastIndex = titleIndex + title.length;
      const nextMatch = nextSectionPattern.exec(text);
      if (nextMatch) {
        sectionEnd = nextMatch.index;
      }
      
      // Begrens til maksimalt 1000 tegn
      sectionEnd = Math.min(sectionEnd, sectionStart + 1000);
      
      return text.substring(sectionStart, sectionEnd).trim();
    }
  }
  
  return null;
}

// Funksjon for √• hente salgsoppgavetekst fra dokumentside
async function extractSalgsoppgaveFromDocumentPage(docUrl, browser) {
  console.log('üìÑ Henter salgsoppgave fra dokumentside:', docUrl);
  
  try {
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    await page.goto(docUrl, { 
      waitUntil: 'networkidle0',
      timeout: 30000 
    });
    
    // Pr√∏v √• finne tekst p√• dokumentsiden
    const documentText = await page.evaluate(() => {
      // Fjern script, style og andre ikke-tekstuelle elementer
      const elementsToRemove = document.querySelectorAll('script, style, nav, header, footer');
      elementsToRemove.forEach(el => el.remove());
      
      // Hent all synlig tekst
      const bodyText = document.body ? document.body.innerText : '';
      
      // Filtrer bort kort tekst og navigasjon
      const lines = bodyText.split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 10)
        .filter(line => !line.match(/^(hjem|finn|menu|s√∏k|logg)/i));
      
      return lines.join('\n');
    });
    
    console.log('üìñ Dokumenttekst ekstrahert, lengde:', documentText.length, 'tegn');
    
    await page.close();
    
    return {
      text: documentText,
      source: 'document_page'
    };
    
  } catch (error) {
    console.error('‚ùå Feil ved henting av dokumenttekst:', error);
    throw error;
  }
}

// Hovedfunksjon for √• hente og analysere salgsoppgave
// **INTELLIGENT TOKEN-H√ÖNDTERING FOR OPENAI**
function estimateTokens(text) {
  // Grov estimering: 1 token ‚âà 4 tegn for norsk tekst
  return Math.ceil(text.length / 4);
}

function compressRelevantContent(text) {
  console.log('üóúÔ∏è Komprimerer tekst for bedre AI-analyse...');
  
  // FASE 1: Identifiser og behold viktige seksjoner
  const importantSections = [
    'teknisk tilstand', 'tekniske installasjoner', 'bygningsmessig', 'vedlikehold',
    'pris', 'totalpris', 'prisantydning', 'omkostninger',
    'bruksareal', 'prim√¶rareal', 'areal', 'st√∏rrelse', 'rom',
    'bygge√•r', 'oppf√∏rt', 'rehabilitert', 'renovert',
    'energi', 'oppvarming', 'isolering',
    'beliggenhet', 'utsikt', 'st√∏y', 'n√¶rmilj√∏',
    'felles', 'fellesgjeld', 'husleie', 'felleskostnader',
    'juridisk', 'rettigheter', 'servitutter', 'byggeforskrifter'
  ];
  
  const lines = text.split('\n');
  const relevantLines = [];
  let currentSection = '';
  
  for (const line of lines) {
    const cleanLine = line.toLowerCase().trim();
    
    // Sjekk om linjen starter en ny viktig seksjon
    const matchedSection = importantSections.find(section => 
      cleanLine.includes(section) && (cleanLine.includes(':') || cleanLine.length < 100)
    );
    
    if (matchedSection) {
      currentSection = matchedSection;
      relevantLines.push(line);
    } else if (currentSection && line.trim().length > 0) {
      // Fortsett √• samle linjer under aktiv seksjon
      relevantLines.push(line);
      
      // Stopp seksjon hvis vi m√∏ter en ny overskrift eller tomt avsnitt
      if (cleanLine.match(/^[a-z√¶√∏√•\s]+:$/i) || line.trim().length === 0) {
        currentSection = '';
      }
    } else if (cleanLine.length > 0 && (
      cleanLine.includes('m¬≤') || 
      cleanLine.includes('kr') || 
      cleanLine.match(/\d{4}/) || // √Ör
      cleanLine.includes('bygget') ||
      cleanLine.includes('renovert')
    )) {
      // Behold linjer med viktig numerisk informasjon
      relevantLines.push(line);
    }
  }
  
  const compressed = relevantLines.join('\n');
  console.log(`üìä Tekst komprimert: ${text.length} ‚Üí ${compressed.length} tegn (${Math.round((1 - compressed.length/text.length) * 100)}% reduksjon)`);
  
  return compressed.length > 0 ? compressed : text.substring(0, 12000);
}

function buildDynamicSystemPrompt(salgsoppgaveFakta) {
  let prompt = `Du er en norsk boligekspert og eiendomsmegler med lang erfaring. Du f√•r en salgsoppgave fra Finn.no/DNB/andre kilder.

**STRUKTURERTE FAKTA (PRIORITER DISSE):**`;

  if (Object.keys(salgsoppgaveFakta).length > 0) {
    for (const [key, value] of Object.entries(salgsoppgaveFakta)) {
      if (key !== '_braMetadata') {
        prompt += `\n- ${key}: ${value}`;
      }
    }
  } else {
    prompt += '\nIngen strukturerte fakta ekstrahert - analyser full tekst.';
  }

  prompt += `\n\nAnalyser informasjonen grundig og gi en profesjonell vurdering p√•:
1. TEKNISK TILSTAND: Bygningens standard, vedlikeholdsbehov, installasjoner
2. RISIKOFAKTORER: Potensielle problemer, fremtidige kostnader, juridiske forhold  
3. PRISVURDERING: Markedssammenligning, pris per m¬≤, posisjon
4. OPPUSSINGSBEHOV: N√∏dvendige og √∏nskede oppgraderinger med kostnader
5. ANBEFALTE SP√òRSM√ÖL: Viktige sp√∏rsm√•l til visning/megler

Gi svaret som strukturert JSON med disse feltene:
{
  "tekniskTilstand": {"score": 1-10, "sammendrag": "tekst", "detaljer": "tekst", "hovedFunn": ["liste"]},
  "risiko": {"score": 1-10, "sammendrag": "tekst", "risikoer": ["liste"], "anbefalinger": ["liste"]},
  "prisvurdering": {"score": 1-10, "sammendrag": "tekst", "prisPerM2Vurdering": "tekst", "markedsvurdering": "tekst"},
  "oppussingBehov": {"nodvendig": ["liste"], "onsket": ["liste"], "estimertKostnad": "tekst"},
  "anbefalteSporsmal": ["sp√∏rsm√•l"],
  "konklusjon": "samlet vurdering"
}

V√¶r kritisk og realistisk. Base deg p√• norske forhold.`;

  return prompt;
}

function truncateIntelligently(text, maxTokens) {
  const maxChars = maxTokens * 4; // 4 tegn per token
  
  if (text.length <= maxChars) {
    return text;
  }
  
  console.log(`‚úÇÔ∏è Trunkerer tekst intelligent: ${text.length} ‚Üí ${maxChars} tegn`);
  
  // Pr√∏v √• kutte ved naturlige avsnitt
  const paragraphs = text.split('\n\n');
  let result = '';
  
  for (const paragraph of paragraphs) {
    if ((result + paragraph).length <= maxChars) {
      result += paragraph + '\n\n';
    } else {
      break;
    }
  }
  
  if (result.length < maxChars * 0.8) {
    // Hvis for mye ble kuttet, ta f√∏rste del direkte
    return text.substring(0, maxChars);
  }
  
  return result.trim();
}

async function intelligentOpenAIAnalysis(salgsoppgaveText, salgsoppgaveFakta) {
  console.log('ü§ñ === INTELLIGENT OPENAI ANALYSE ===');
  
  // FASE 1: Intelligent tekst-komprimering
  const compressedText = compressRelevantContent(salgsoppgaveText);
  
  // FASE 2: Dynamisk prompt-tilpasning
  const systemPrompt = buildDynamicSystemPrompt(salgsoppgaveFakta);
  
  // FASE 3: Smart token-budsjett
  const maxTokens = 15000; // gpt-4o-mini kan h√•ndtere mye mer
  const promptTokens = estimateTokens(systemPrompt);
  const availableForContent = maxTokens - promptTokens - 2500; // Buffer for respons
  
  const finalContent = truncateIntelligently(compressedText, availableForContent);
  
  console.log(`ü§ñ Token-budsjett: ${promptTokens} system + ${estimateTokens(finalContent)} innhold = ${promptTokens + estimateTokens(finalContent)} totalt`);
  
  // FASE 4: Forbedret strukturert prompt
  const structuredFacts = Object.keys(salgsoppgaveFakta).length > 0 
    ? `**EKSTRAHERTE FAKTA:**\n${Object.entries(salgsoppgaveFakta).map(([k,v]) => `${k}: ${v}`).join('\n')}\n\n`
    : '';
  
  const userContent = `${structuredFacts}**SALGSOPPGAVE-TEKST:**\n${finalContent}`;
  
  const messages = [
    { role: 'system', content: systemPrompt },
    { role: 'user', content: userContent }
  ];
  
  // FASE 5: Optimalisert API-kall
  return await openai.chat.completions.create({
    model: 'gpt-4o-mini', // Bedre og billigere enn 3.5-turbo
    messages,
    temperature: 0.2,     // Litt mer deterministisk
    max_tokens: 2500,     // Mer plass for detaljert analyse
    response_format: { type: "json_object" } // Sikrer JSON-respons
  });
}

// **INTELLIGENT REDIS CACHING WRAPPER**
async function getCachedOrAnalyzeSalgsoppgave(finnUrl) {
  const cacheKey = `analysis:v2:${crypto.createHash('md5').update(finnUrl).digest('hex')}`;
  
  // FASE 1: Pr√∏v cache f√∏rst
  if (redis) {
    try {
      const cached = await redis.get(cacheKey);
      if (cached) {
        const parsed = JSON.parse(cached);
        
        // INTELLIGENT CACHE-ALDERSSJEKK
        const age = Date.now() - (parsed.timestamp || 0);
        const quality = parsed.qualityScore || 5;
        
        // H√∏ykvalitets analyser caches lengre
        const maxAge = quality > 8 ? 7 * 24 * 60 * 60 * 1000 :  // 7 dager
                      quality > 5 ? 24 * 60 * 60 * 1000 :        // 1 dag  
                                    2 * 60 * 60 * 1000;           // 2 timer
        
        if (age < maxAge) {
          console.log(`‚úÖ Cache hit: ${Math.round(age/3600000)}t gammel analyse (kvalitet: ${quality}/10)`);
          return { ...parsed, _cached: true, _cacheAge: age };
        } else {
          console.log(`‚è∞ Cache utl√∏pt: ${Math.round(age/3600000)}t (maks: ${Math.round(maxAge/3600000)}t)`);
          await redis.del(cacheKey); // Rydd opp utl√∏pt cache
        }
      }
    } catch (cacheError) {
      console.log('‚ö†Ô∏è Cache read feilet:', cacheError.message);
    }
  }
  
  // FASE 2: Utf√∏r analyse
  console.log('üîÑ Utf√∏rer ny analyse (ikke cachet)...');
  const result = await getSalgsoppgaveAnalysisInternal(finnUrl);
  
  // FASE 3: Cache resultatet
  if (redis && result.success) {
    try {
      const qualityScore = calculateQualityScore(result);
      const dataToCache = {
        ...result,
        timestamp: Date.now(),
        qualityScore,
        _cacheVersion: 'v2'
      };
      
      // TTL basert p√• kvalitet
      const ttl = qualityScore > 8 ? 7 * 24 * 3600 :  // 7 dager
                  qualityScore > 5 ? 24 * 3600 :        // 1 dag
                                    2 * 3600;            // 2 timer
      
      await redis.setex(cacheKey, ttl, JSON.stringify(dataToCache));
      console.log(`üíæ Cached analysis med ${Math.round(ttl/3600)}t TTL (kvalitet: ${qualityScore}/10)`);
    } catch (cacheError) {
      console.log('‚ö†Ô∏è Cache write feilet:', cacheError.message);
    }
  }
  
  return result;
}

// Beregn kvalitetscore for intelligent caching
function calculateQualityScore(result) {
  let score = 5; // Base score
  
  // Boost for salgsoppgave-tekst
  if (result.salgsoppgaveText?.length > 3000) score += 2;
  else if (result.salgsoppgaveText?.length > 1000) score += 1;
  
  // Boost for strukturerte fakta
  if (result.salgsoppgaveFakta && Object.keys(result.salgsoppgaveFakta).length > 3) score += 1;
  
  // Boost for AI-analyse
  if (result.aiAnalysis) score += 1;
  
  // Boost for h√∏y konfidens p√• BRA
  if (result.salgsoppgaveFakta?._braMetadata?.confidence > 80) score += 1;
  
  return Math.min(10, Math.max(1, score));
}

async function getSalgsoppgaveAnalysisInternal(finnUrl) {
  console.log('üè† Starter salgsoppgave-analyse for:', finnUrl);
  
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    console.log('üåê Navigerer til Finn-siden...');
    await page.goto(finnUrl, { 
      waitUntil: 'networkidle0',
      timeout: 30000 
    });
    
    // 1. Finn PDF/dokumentlenker
    const documentLinks = await findSalgsoppgavePDF(page, finnUrl);
    
    let salgsoppgaveText = '';
    let source = '';
    
    // 2. **VALID√âR DOKUMENTER F√òR BEHANDLING**
    // F√∏rst, filtrer bort dokumenter som ikke tilh√∏rer riktig eiendom
    const validatedDocuments = [];
    for (const doc of documentLinks) {
      if (doc.url && doc.url.startsWith('http') && doc.type === 'dom_link') {
        try {
          const isValid = await validateDocumentForProperty(doc.url, finnUrl, page);
          if (isValid) {
            validatedDocuments.push(doc);
            console.log('‚úÖ Godkjent dokument:', doc.url.substring(0, 80));
          } else {
            console.log('‚ùå Forkastet dokument (feil eiendom):', doc.url.substring(0, 80));
          }
        } catch (error) {
          console.log('‚ö†Ô∏è Kunne ikke validere dokument:', doc.url.substring(0, 80), error.message);
          // Hvis validering feiler, ikke ta med dokumentet
        }
      } else {
        // Behold ikke-URL dokumenter (JSON, base64 etc) og andre typer
        validatedDocuments.push(doc);
      }
    }
    
    console.log(`üìä Validerte ${validatedDocuments.length} av ${documentLinks.length} dokumenter`);
    
    // Pr√∏v √• behandle alle validerte dokumenter med prioritert rekkef√∏lge
    const prioriterteDokumenter = [
      ...validatedDocuments.filter(d => d.type === 'pdf' || d.url?.includes('.pdf')),
      ...validatedDocuments.filter(d => d.type === 'base64'),
      ...validatedDocuments.filter(d => d.type === 'json'),
      ...validatedDocuments.filter(d => d.type === 'verified_document_page'),
      ...validatedDocuments.filter(d => d.type === 'dom_link' && !d.url?.includes('.pdf'))
    ];
    
    console.log('üìä Behandler', prioriterteDokumenter.length, 'validerte dokumenter i prioritert rekkef√∏lge');
    
    // **STEG 5**: FORBEDRET DOKUMENTBEHANDLING MED DETALJERT LOGGING
    let dokumentFors√∏k = 0;
    const dokumentResultater = [];
    let pdfFors√∏k = 0;
    let htmlFors√∏k = 0;
    let jsonFors√∏k = 0;
    
    for (const dokument of prioriterteDokumenter) {
      dokumentFors√∏k++;
      
      // **STEG 5**: Kategoriser behandlingstype for logging
      const isPDF = ['pdf', 'iframe_pdf', 'object_pdf', 'embed_pdf', 'forced_pdf_from_viewer', 'pdf_from_link_page'].includes(dokument.type);
      const isHTML = ['verified_document_page', 'html_fallback', 'dom_link'].includes(dokument.type);
      const isJSON = ['json', 'base64'].includes(dokument.type);
      
      if (isPDF) pdfFors√∏k++;
      if (isHTML) htmlFors√∏k++;
      if (isJSON) jsonFors√∏k++;
      
      try {
        console.log(`üîÑ === DOKUMENT ${dokumentFors√∏k}/${prioriterteDokumenter.length} ===`);
        console.log('üîÑ Type:', dokument.type);
        console.log('üîÑ Kategori:', isPDF ? 'üìÑ PDF' : isHTML ? 'üåê HTML' : isJSON ? 'üìã JSON/Data' : '‚ùì Annet');
        console.log('üîÑ Beskrivelse:', dokument.text?.substring(0, 50) || 'N/A');
        console.log('üîÑ URL:', dokument.url?.substring(0, 80) || 'N/A');
        console.log('üîÑ Fors√∏ksteller - PDF:', pdfFors√∏k, 'HTML:', htmlFors√∏k, 'JSON:', jsonFors√∏k);
        
        const startTime = Date.now();
        const result = await processDocument(dokument, browser);
        const processingTime = Date.now() - startTime;
        
        // **STEG 5**: Detaljert logging av resultatet
        console.log(`‚è±Ô∏è Behandlingstid: ${processingTime}ms`);
        
        // Logg resultatet for debugging med mer detaljer
        const documentResult = {
          index: dokumentFors√∏k,
          type: dokument.type,
          category: isPDF ? 'PDF' : isHTML ? 'HTML' : isJSON ? 'JSON' : 'Other',
          url: dokument.url,
          success: result.success,
          textLength: result.text?.length || 0,
          error: result.error,
          processingTime: processingTime,
          source: result.source,
          isHtmlFallback: result.isHtmlFallback || false
        };
        dokumentResultater.push(documentResult);
        
        if (result.success && result.text) {
          const textLength = result.text.length;
          console.log('üìä Tekst ekstrahert:', textLength, 'tegn');
          console.log('üìä Kilde:', result.source || 'Ukjent');
          
          // **STEG 5**: Logg om dette er HTML-fallback
          if (result.isHtmlFallback) {
            console.log('‚ö†Ô∏è MERK: Dette er HTML-fallback, ikke direkte PDF-innhold');
          }
          
          // **BEDRE KVALITETSVURDERING AV TEKST**
          if (textLength > 1000) {
            salgsoppgaveText = result.text;
            source = `${result.source || dokument.type}: ${result.sourceUrl || dokument.url}`;
            console.log('‚úÖ H√òYKVALITETS SALGSOPPGAVE FUNNET!');
            console.log('üìÑ Kilde:', source);
            console.log('üìÑ Tekstlengde:', textLength, 'tegn');
            console.log('üìÑ Type behandling:', isPDF ? 'PDF (beste)' : isHTML ? 'HTML (fallback)' : 'JSON/Data');
            break;
          } else if (textLength > 300) {
            // Medium kvalitet - behold som fallback
            if (!salgsoppgaveText || salgsoppgaveText.length < textLength) {
              salgsoppgaveText = result.text;
              source = `${result.source || dokument.type} (medium): ${result.sourceUrl || dokument.url}`;
              console.log('‚ö†Ô∏è MEDIUM KVALITET TEKST - beholder som fallback');
              console.log('üìÑ Tekstlengde:', textLength, 'tegn');
              console.log('üìÑ Type behandling:', isPDF ? 'PDF (medium)' : isHTML ? 'HTML (fallback)' : 'JSON/Data');
            }
          } else if (textLength > 50) {
            // Lav kvalitet - kun hvis vi ikke har noe bedre
            if (!salgsoppgaveText) {
              salgsoppgaveText = result.text;
              source = `${result.source || dokument.type} (lav kvalitet): ${result.sourceUrl || dokument.url}`;
              console.log('‚ö†Ô∏è LAV KVALITET TEKST - beholder som siste utvei');
              console.log('üìÑ Tekstlengde:', textLength, 'tegn');
              console.log('üìÑ Type behandling:', isPDF ? 'PDF (lav)' : isHTML ? 'HTML (fallback)' : 'JSON/Data');
            }
          } else {
            console.log('‚ùå For lite tekst ekstrahert:', textLength, 'tegn');
            console.log('üìÑ Tekst preview:', result.text.substring(0, 100));
            console.log('üìÑ Mulige problemer:', isPDF ? 'PDF kan v√¶re scannet eller korrupt' : isHTML ? 'HTML-side mangler innhold' : 'JSON mangler tekst-felt');
          }
        } else {
          // **STEG 5**: Detaljert feillogging
          console.log('‚ùå === DOKUMENT-BEHANDLING FEILET ===');
          console.log('   - Success:', result.success);
          console.log('   - Type:', dokument.type);
          console.log('   - Kategori:', isPDF ? 'PDF' : isHTML ? 'HTML' : 'JSON/Data');
          console.log('   - Feil:', result.error);
          console.log('   - Detaljer:', result.details || 'Ingen detaljer');
          console.log('   - URL:', dokument.url?.substring(0, 100));
          
          // **STEG 5**: Diagnostikk basert p√• type
          if (isPDF) {
            console.log('   üìÑ PDF-spesifikke problemer:');
            console.log('      - Kan v√¶re passordbeskyttet');
            console.log('      - Kan v√¶re scannet (ikke tekstbasert)');
            console.log('      - Nettverkstilgang kan v√¶re blokkert');
          } else if (isHTML) {
            console.log('   üåê HTML-spesifikke problemer:');
            console.log('      - Siden kan kreve JavaScript');
            console.log('      - Innhold kan v√¶re dynamisk lastet');
            console.log('      - Anti-scraping beskyttelse');
          } else if (isJSON) {
            console.log('   üìã JSON-spesifikke problemer:');
            console.log('      - Mangler tekst-felt i JSON-struktur');
            console.log('      - Base64-data kan v√¶re korrupt');
          }
        }
      } catch (error) {
        // **STEG 5**: Detaljert feilh√•ndtering
        console.log('‚ùå === KRITISK FEIL VED BEHANDLING AV DOKUMENT ===');
        console.log('   - Dokument index:', dokumentFors√∏k);
        console.log('   - Type:', dokument.type);
        console.log('   - Kategori:', isPDF ? 'PDF' : isHTML ? 'HTML' : 'JSON/Data');
        console.log('   - URL:', dokument.url?.substring(0, 80));
        console.log('   - Feil:', error.message);
        console.log('   - Stack:', error.stack?.substring(0, 300));
        console.log('   - Tidspunkt:', new Date().toISOString());
        
        dokumentResultater.push({
          index: dokumentFors√∏k,
          type: dokument.type,
          category: isPDF ? 'PDF' : isHTML ? 'HTML' : 'JSON',
          url: dokument.url,
          success: false,
          textLength: 0,
          error: error.message,
          processingTime: 0,
          kritiskFeil: true
        });
        
        continue;
      }
    }
    
    // **STEG 5**: SAMMENDRAG-LOGGING AV HELE DOKUMENTBEHANDLINGEN
    console.log('üìä === SAMMENDRAG AV DOKUMENTBEHANDLING ===');
    console.log('üìä Totalt dokumenter behandlet:', dokumentResultater.length);
    console.log('üìä Vellykkede ekstraksjoner:', dokumentResultater.filter(d => d.success).length);
    console.log('üìä Feilede ekstraksjoner:', dokumentResultater.filter(d => !d.success).length);
    console.log('üìä Kritiske feil:', dokumentResultater.filter(d => d.kritiskFeil).length);
    
    // Kategorisering av behandlede dokumenter
    const behandledePDF = dokumentResultater.filter(d => d.category === 'PDF');
    const behandledeHTML = dokumentResultater.filter(d => d.category === 'HTML');
    const behandledeJSON = dokumentResultater.filter(d => d.category === 'JSON');
    
    console.log('üìä Behandlede PDF-dokumenter:', behandledePDF.length);
    console.log('üìä Behandlede HTML-dokumenter:', behandledeHTML.length);
    console.log('üìä Behandlede JSON-dokumenter:', behandledeJSON.length);
    
    // **STEG 5**: Detaljert oversikt over hva som fungerte
    const vellykkedePDF = behandledePDF.filter(d => d.success && d.textLength > 0);
    const vellykkdeHTML = behandledeHTML.filter(d => d.success && d.textLength > 0);
    const vellykkdeJSON = behandledeJSON.filter(d => d.success && d.textLength > 0);
    
    console.log('üìä === VELLYKKEDE EKSTRAKSJONER ===');
    console.log('‚úÖ PDF-ekstraksjoner:', vellykkedePDF.length);
    console.log('‚úÖ HTML-ekstraksjoner (fallback):', vellykkdeHTML.length);
    console.log('‚úÖ JSON-ekstraksjoner:', vellykkdeJSON.length);
    
    // Logg beste resultat per kategori
    if (vellykkedePDF.length > 0) {
      const bestePDF = vellykkedePDF.reduce((best, current) => 
        current.textLength > best.textLength ? current : best
      );
      console.log('üèÜ Beste PDF-resultat:', bestePDF.textLength, 'tegn fra', bestePDF.type);
    }
    
    if (vellykkdeHTML.length > 0) {
      const besteHTML = vellykkdeHTML.reduce((best, current) => 
        current.textLength > best.textLength ? current : best
      );
      console.log('üèÜ Beste HTML-resultat:', besteHTML.textLength, 'tegn fra', besteHTML.type);
    }
    
    // **STEG 5**: Detaljerte resultater
    console.log('üìä === DETALJERTE RESULTATER ===');
    dokumentResultater.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      const kategori = result.category || 'N/A';
      const feilInfo = result.error ? ` (${result.error})` : '';
      const kritisk = result.kritiskFeil ? ' [KRITISK]' : '';
      console.log(`   ${index + 1}. ${status} ${kategori}/${result.type}: ${result.textLength} tegn${feilInfo}${kritisk}`);
    });
    
    // **STEG 5**: Logg hovedresultat
    console.log('üìä === HOVEDRESULTAT ===');
    console.log('üìä Salgsoppgave-tekst funnet:', !!salgsoppgaveText);
    if (salgsoppgaveText) {
      console.log('üìÑ Tekstlengde:', salgsoppgaveText.length, 'tegn');
      console.log('üìÑ Kilde:', source);
      console.log('üìÑ Kvalitetsniv√•:', 
        salgsoppgaveText.length > 3000 ? 'UTMERKET (>3000)' :
        salgsoppgaveText.length > 1000 ? 'H√òYKVALITET (>1000)' :
        salgsoppgaveText.length > 300 ? 'MEDIUM (>300)' :
        salgsoppgaveText.length > 50 ? 'LAV (>50)' : 'SV√ÜRT LAV (<50)'
      );
    } else {
      console.log('‚ùå INGEN SALGSOPPGAVE-TEKST FUNNET');
      console.log('‚ùå Dette vil f√∏re til begrenset analyse');
    }
    
    // **STEG 5**: Logg problemer som oppstod
    const problemer = dokumentResultater.filter(d => !d.success);
    if (problemer.length > 0) {
      console.log('‚ö†Ô∏è === PROBLEMER SOM OPPSTOD ===');
      problemer.forEach((problem, index) => {
        console.log(`   ${index + 1}. ${problem.type} (${problem.category}): ${problem.error}`);
      });
      
      // **STEG 5**: Forslag til forbedringer
      console.log('üí° === FORSLAG TIL FORBEDRINGER ===');
      const pdfProblemer = problemer.filter(p => p.category === 'PDF').length;
      const htmlProblemer = problemer.filter(p => p.category === 'HTML').length;
      
      if (pdfProblemer > 0) {
        console.log('   üìÑ PDF-problemer kan l√∏ses ved:');
        console.log('      - Sjekke om PDF-er krever autentisering');
        console.log('      - Forbedre PDF-parsing for scannede dokumenter');
        console.log('      - Implementere bedre nettverksh√•ndtering');
      }
      
      if (htmlProblemer > 0) {
        console.log('   üåê HTML-problemer kan l√∏ses ved:');
        console.log('      - Vente lengre p√• JavaScript-loading');
        console.log('      - Forbedre CSS-selector for innhold');
        console.log('      - H√•ndtere mer dynamisk innhold');
      }
    }
    
    // 3. **FORBEDRET FALLBACK**: Hent mer strukturert info fra hovedsiden
    if (!salgsoppgaveText || salgsoppgaveText.length < 200) {
      console.log('üìÑ Fallback: henter utvidet informasjon fra hovedsiden');
      
      const pageData = await page.evaluate(() => {
        // Fjern ikke-relevante elementer
        const elementsToRemove = document.querySelectorAll('script, style, nav, header, footer, .cookie-banner, .ad');
        elementsToRemove.forEach(el => el.remove());
        
        // Hent relevant innhold
        const content = [];
        
        // **UTVIDET S√òKING ETTER SALGSOPPGAVE-LENKER**
        const salgsoppgaveLinks = [];
        const allLinks = document.querySelectorAll('a[href*="salgsoppgave"], a[href*="prospekt"], a[href*="em1sr"], a[href*="eiendomsmegler"]');
        allLinks.forEach(link => {
          if (link.href && link.href.startsWith('http')) {
            salgsoppgaveLinks.push({
              url: link.href,
              text: link.textContent.trim(),
              title: link.title || link.getAttribute('aria-label') || ''
            });
          }
        });
        
        // **STRUKTURERT DATAHENTING**
        const strukturertData = {};
        
        // Hent alle key-value par fra siden
        const allText = document.body.textContent;
        const lines = allText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
        
        // S√∏k etter spesifikke data-m√∏nstre
        const dataPatterns = {
          'Prisantydning': /Prisantydning[\s\n]*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
          'Totalpris': /Totalpris[\s\n]*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
          'Bruksareal': /(?:Internt\s+)?bruksareal[\s\n]*(\d+)\s*m¬≤/i,
          'Prim√¶rareal': /Prim√¶rareal[\s\n]*(\d+)\s*m¬≤/i,
          'Rom': /(\d+)\s*rom(?!\s*leilighet)/i,
          'Soverom': /(\d+)\s*soverom/i,
          'Bygge√•r': /Bygge√•r[\s\n]*(\d{4})/i,
          'Eierform': /Eierform[\s\n]*(Eier|Andel|Aksje)/i,
          'Energimerking': /Energimerking[\s\n]*([A-G])/i
        };
        
        for (const [key, pattern] of Object.entries(dataPatterns)) {
          const match = allText.match(pattern);
          if (match && match[1]) {
            strukturertData[key] = match[1];
          }
        }
        
        // Hovedinnhold med utvidede selektorer
        const mainSelectors = [
          'main', 
          '[role="main"]', 
          '.content', 
          '.ad-content', 
          '.object-content',
          '.property-content',
          '.listing-content',
          '.real-estate-content',
          'article'
        ];
        
        for (const selector of mainSelectors) {
          const element = document.querySelector(selector);
          if (element) {
            content.push(element.innerText);
            break;
          }
        }
        
        // Hvis ikke hovedinnhold, ta body
        if (content.length === 0) {
          content.push(document.body.innerText);
        }
        
        return {
          text: content.join('\n'),
          salgsoppgaveLinks: salgsoppgaveLinks,
          strukturertData: strukturertData
        };
      });
      
      if (pageData.text && pageData.text.length > (salgsoppgaveText?.length || 0)) {
        salgsoppgaveText = pageData.text;
        source = 'Hovedside (forbedret fallback)';
        console.log('üìÑ Forbedret fallback-tekst hentet, lengde:', pageData.text.length, 'tegn');
        
        // Logg funnet strukturert data
        if (Object.keys(pageData.strukturertData).length > 0) {
          console.log('üìä Strukturert data fra hovedside:', pageData.strukturertData);
        }
        
                 // Logg eventuelle salgsoppgave-lenker som ikke ble testet
         if (pageData.salgsoppgaveLinks.length > 0) {
           console.log('üîó Ekstra salgsoppgave-lenker funnet:', pageData.salgsoppgaveLinks.length);
           pageData.salgsoppgaveLinks.forEach((link, index) => {
             console.log(`   ${index + 1}. ${link.text} (${link.url.substring(0, 80)}...)`);
           });
           
           // **SISTE FORS√òK**: Pr√∏v √• laste f√∏rste salgsoppgave-lenke direkte
           if (pageData.salgsoppgaveLinks.length > 0 && (!salgsoppgaveText || salgsoppgaveText.length < 1000)) {
             console.log('üîÑ Siste fors√∏k: laster f√∏rste salgsoppgave-lenke direkt...');
             
             try {
               const extraPage = await browser.newPage();
               await extraPage.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
               
               const firstLink = pageData.salgsoppgaveLinks[0];
               console.log(`üì• Fors√∏ker √• laste: ${firstLink.url}`);
               
               await extraPage.goto(firstLink.url, { 
                 waitUntil: 'domcontentloaded',
                 timeout: 20000 
               });
               
               // Vent litt for at siden skal bli ferdig lastet
               await new Promise(resolve => setTimeout(resolve, 3000));
               
               const extraText = await extraPage.evaluate(() => {
                 const elementsToRemove = document.querySelectorAll('script, style, nav, header, footer');
                 elementsToRemove.forEach(el => el.remove());
                 
                 return document.body ? document.body.innerText : '';
               });
               
               await extraPage.close();
               
               if (extraText && extraText.length > salgsoppgaveText.length) {
                 console.log('‚úÖ Fant bedre tekst fra direkte salgsoppgave-lenke!');
                 console.log(`üìÑ Ny tekstlengde: ${extraText.length} tegn (fra ${salgsoppgaveText.length})`);
                 salgsoppgaveText = extraText;
                 source = `Direkte salgsoppgave-lenke: ${firstLink.text}`;
               } else {
                 console.log('‚ö†Ô∏è Direkte lenke ga ikke bedre resultat');
               }
               
             } catch (error) {
               console.log('‚ùå Kunne ikke laste direkte salgsoppgave-lenke:', error.message);
             }
           }
         }
       }
     }
    
    await page.close();
    
    // 4. **EKSTRAHER STRUKTURERTE FAKTA FRA SALGSOPPGAVE (HOVEDKILDE)**
    // VIKTIG: Dette er hovedkilden - skal prioriteres over all scraping-data
    let salgsoppgaveFakta = {};
    if (salgsoppgaveText && salgsoppgaveText.length > 100) {
      console.log('üìä === EKSTRAHERER STRUKTURERTE FAKTA FRA SALGSOPPGAVE (HOVEDKILDE) ===');
      salgsoppgaveFakta = extractSalgsoppgaveFakta(salgsoppgaveText);
      console.log('‚úÖ Salgsoppgave-fakta ekstrahert:', salgsoppgaveFakta);
    }
    
    // 5. **FORBEDRET OPENAI ANALYSE** med intelligent token-h√•ndtering
    let analysis = null;
    
    if (salgsoppgaveText && salgsoppgaveText.length > 100) {
      console.log('ü§ñ Starter forbedret OpenAI-analyse...');
      console.log('üìä Opprinnelig tekst lengde:', salgsoppgaveText.length, 'tegn');
      console.log('üìä Strukturerte fakta:', Object.keys(salgsoppgaveFakta).length, 'felter');
      
      if (process.env.OPENAI_API_KEY) {
        try {
          const completion = await intelligentOpenAIAnalysis(salgsoppgaveText, salgsoppgaveFakta);
          const responseContent = completion.choices[0].message.content;
          
          try {
            // Pr√∏v √• parse direkte f√∏rst
            analysis = JSON.parse(responseContent);
            console.log('‚úÖ OpenAI analyse fullf√∏rt (direkte parsing)');
          } catch (parseError) {
            console.log('‚ö†Ô∏è Direkte parsing feilet, pr√∏ver √• finne JSON i respons');
            
            // Pr√∏v √• finne JSON innenfor markdown code blocks eller lignende
            let jsonString = responseContent;
            
            // Fjern markdown code blocks
            jsonString = jsonString.replace(/```json\n?/g, '').replace(/```\n?/g, '');
            
            // Pr√∏v √• finne JSON-objekt
            const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              try {
                analysis = JSON.parse(jsonMatch[0]);
                console.log('‚úÖ OpenAI analyse fullf√∏rt (ekstrahert JSON)');
              } catch (secondParseError) {
                console.log('‚ö†Ô∏è Kunne ikke parse JSON fra OpenAI, bruker r√• respons');
                analysis = {
                  raaAnalyse: responseContent,
                  feil: 'Kunne ikke parse JSON'
                };
              }
            } else {
              console.log('‚ö†Ô∏è Ingen JSON funnet i OpenAI respons, bruker r√• respons');
              analysis = {
                raaAnalyse: responseContent,
                feil: 'Ingen JSON funnet'
              };
            }
          }
          
        } catch (openaiError) {
          console.error('‚ùå OpenAI API feil:', openaiError);
          analysis = {
            feil: `OpenAI API feil: ${openaiError.message}`,
            tekst: salgsoppgaveText.substring(0, 1000) + '...'
          };
        }
      } else {
        console.log('‚ö†Ô∏è Ingen OpenAI API-n√∏kkel, returnerer kun tekst');
        analysis = {
          feil: 'Ingen OpenAI API-n√∏kkel konfigurert',
          tekst: salgsoppgaveText.substring(0, 1000) + '...'
        };
      }
    } else {
      analysis = {
        feil: 'Ingen salgsoppgave-tekst funnet',
        funnetDokumenter: documentLinks
      };
    }
    
    // **STEG 3**: FORBEDRET RETUR-LOGIKK MED KVALITETSVURDERING OG PDF-UPLOAD ANBEFALING
    const textQuality = salgsoppgaveText ? 
      (salgsoppgaveText.length > 3000 ? 'h√∏y' : 
       salgsoppgaveText.length > 1000 ? 'medium' : 
       salgsoppgaveText.length > 300 ? 'lav' : 'sv√¶rt lav') : 'ingen';
    
    // **STEG 3**: Sjekk om vi trenger PDF-upload (mindre enn 3000 tegn)
    const needsPDFUpload = !salgsoppgaveText || salgsoppgaveText.length < 3000;
    
    const textAnalysis = {
      hasText: !!salgsoppgaveText,
      textLength: salgsoppgaveText?.length || 0,
      quality: textQuality,
      sufficientForAnalysis: salgsoppgaveText && salgsoppgaveText.length > 300,
      recommendAIAnalysis: salgsoppgaveText && salgsoppgaveText.length > 1000,
      warningMessage: null,
      // **STEG 3**: Ny flagg for PDF-upload anbefaling
      needsPDFUpload: needsPDFUpload,
      userFriendlyMessage: null
    };
    
    // **STEG 3**: Generer advarsler og brukervennlige beskjeder basert p√• tekst-kvalitet
    if (!salgsoppgaveText) {
      textAnalysis.warningMessage = "Ingen salgsoppgave-tekst funnet. AI-analyse vil v√¶re sv√¶rt begrenset.";
      textAnalysis.userFriendlyMessage = "Vi fant ikke nok informasjon i salgsoppgaven automatisk. For en komplett analyse, last opp PDF direkte.";
    } else if (textAnalysis.textLength < 3000) {
      if (textAnalysis.quality === 'sv√¶rt lav') {
        textAnalysis.warningMessage = `Sv√¶rt lite tekst funnet (${textAnalysis.textLength} tegn). AI-analyse kan v√¶re meget un√∏yaktig.`;
        textAnalysis.userFriendlyMessage = "Vi fant sv√¶rt lite informasjon i salgsoppgaven automatisk. For en komplett analyse, last opp PDF direkte.";
      } else if (textAnalysis.quality === 'lav') {
        textAnalysis.warningMessage = `Begrenset tekst funnet (${textAnalysis.textLength} tegn). AI-analyse kan mangle viktige detaljer.`;
        textAnalysis.userFriendlyMessage = "Vi fant begrenset informasjon i salgsoppgaven automatisk. For en mer detaljert analyse, last opp PDF direkte.";
      } else if (textAnalysis.quality === 'medium') {
        textAnalysis.warningMessage = `Moderat mengde tekst funnet (${textAnalysis.textLength} tegn). AI-analyse b√∏r v√¶re brukbar, men kan mangle noen detaljer.`;
        textAnalysis.userFriendlyMessage = "Vi fant moderat informasjon i salgsoppgaven. For en mer komplett analyse, vurder √• laste opp PDF direkte.";
      }
    } else {
      // Tilstrekkelig tekst funnet
      textAnalysis.warningMessage = null;
      textAnalysis.userFriendlyMessage = null;
    }
    
    console.log('üìä === TEKSTKVALITET VURDERING ===');
    console.log('üìä Tekst tilgjengelig:', textAnalysis.hasText);
    console.log('üìä Tekstlengde:', textAnalysis.textLength);
    console.log('üìä Kvalitet:', textAnalysis.quality);
    console.log('üìä Tilstrekkelig for analyse:', textAnalysis.sufficientForAnalysis);
    console.log('üìä Anbefaler AI-analyse:', textAnalysis.recommendAIAnalysis);
    if (textAnalysis.warningMessage) {
      console.log('‚ö†Ô∏è Advarsel:', textAnalysis.warningMessage);
    }
    
    const returnData = {
      success: true,
      source: source || 'Ingen gyldig kilde funnet',
      documentLinks: documentLinks || [],
      
      // **NY**: Detaljert tekstanalyse for frontend
      textAnalysis: textAnalysis,
      
      // Legacy fields (behold for bakoverkompatibilitet)
      textLength: salgsoppgaveText?.length || 0,
      
      analysis: analysis,
      rawText: process.env.NODE_ENV === 'development' ? salgsoppgaveText?.substring(0, 2000) : undefined,
      
      // **HOVEDDATA FRA SALGSOPPGAVE (PRIORITERES OVER SCRAPING)**
      salgsoppgaveFakta: salgsoppgaveFakta || {},
      
      // Legg til et sammendrag av viktig informasjon for chat-bot
      detailedInfo: salgsoppgaveText ? extractDetailedInfo(salgsoppgaveText) : null,
      
      // **NY**: Debugging info (kun i development)
      debugInfo: process.env.NODE_ENV === 'development' ? {
        dokumentResultater: dokumentResultater || [],
        prioriterteDokumenter: prioriterteDokumenter?.length || 0,
        validatedDocuments: validatedDocuments?.length || 0
      } : undefined
    };
    
    // Logg final resultat
    console.log('üìä === SALGSOPPGAVE ANALYSE KOMPLETT ===');
    console.log('‚úÖ Success:', returnData.success);
    console.log('üìä Kilde:', returnData.source);
    console.log('üìä Dokumenter funnet:', returnData.documentLinks.length);
    console.log('üìä Tekstkvalitet:', returnData.textAnalysis.quality);
    console.log('üìä AI-analyse:', returnData.analysis ? 'Tilgjengelig' : 'Ikke tilgjengelig');
    console.log('üìä Salgsoppgave fakta:', Object.keys(returnData.salgsoppgaveFakta).length, 'felter');
    
    // **STEG 4**: Rydd opp midlertidige filer f√∏r retur
    console.log('üßπ Rydder opp midlertidige filer...');
    cleanupAllTempFiles();
    
    return returnData;
    
  } catch (error) {
    console.error('‚ùå Feil i salgsoppgave-analyse:', error);
    
    // **STEG 4**: Rydd opp midlertidige filer ogs√• ved feil
    console.log('üßπ Rydder opp midlertidige filer (etter feil)...');
    cleanupAllTempFiles();
    
    return {
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    };
  } finally {
    await browser.close();
  }
}

// Forbedret funksjon for √• h√•ndtere ulike dokumenttyper inkludert nye iframe/object/forced typer
async function processDocument(dokument, browser) {
  console.log('üîÑ === BEHANDLER DOKUMENT ===');
  console.log('üîÑ Type:', dokument.type);
  console.log('üîÑ URL:', dokument.url?.substring(0, 100) || 'N/A');
  console.log('üîÑ Tekst:', dokument.text?.substring(0, 50) || 'N/A');
  
  try {
    // H√•ndter forskjellige dokumenttyper
    switch (dokument.type) {
      case 'pdf':
        console.log('üìÑ Behandler direkte PDF-respons...');
        return await downloadAndParsePDF(dokument.url, browser);
      
      case 'iframe_pdf':
      case 'object_pdf':
      case 'embed_pdf':
        console.log('üìÑ Behandler PDF fra iframe/object/embed...');
        return await downloadAndParsePDF(dokument.url, browser);
      
      case 'forced_pdf_from_viewer':
        console.log('üìÑ Behandler PDF som ble forced fra viewer...');
        if (dokument.url) {
          return await downloadAndParsePDF(dokument.url, browser);
        } else {
          return { success: false, error: 'Ingen URL for forced PDF' };
        }
      
      case 'pdf_from_link_page':
        console.log('üìÑ Behandler PDF funnet p√• lenke-side...');
        return await downloadAndParsePDF(dokument.url, browser);
      
      case 'base64':
        console.log('üì¶ Behandler base64-encoded PDF...');
        return await parseBase64PDF(dokument.data);
      
      case 'json':
        console.log('üìã Behandler JSON-respons...');
        return await extractTextFromJSON(dokument.data, dokument.url);
      
      case 'verified_document_page':
        console.log('üåê Behandler verifisert dokumentside...');
        if (dokument.pageAnalysis) {
          // Ny logikk: hvis siden har PDF-elementer, pr√∏v √• hente dem f√∏rst
          if (dokument.pageAnalysis.hasIframe || dokument.pageAnalysis.hasObject || dokument.pageAnalysis.hasEmbed) {
            console.log('üîÑ Dokumentside har PDF-elementer, pr√∏ver direct extraction...');
            // Fors√∏k √• behandle som viewer-side f√∏rst
            const forcedResult = await forceOpenPDFFromViewer(dokument.url, browser);
            if (forcedResult.length > 0 && forcedResult[0].url) {
              return await downloadAndParsePDF(forcedResult[0].url, browser);
            }
          }
          
          // **STEG 2**: Fallback til forbedret tekstekstraksjon fra siden med browser-support
          return await extractTextFromDocumentPage(dokument.pageAnalysis.contentPreview, dokument.url, browser);
        } else if (dokument.pageContent) {
          // **STEG 2**: Legacy support med browser-parameter
          return await extractTextFromDocumentPage(dokument.pageContent, dokument.url, browser);
        } else {
          return await downloadAndParseDocumentPage(dokument.url, browser);
        }
      
      case 'dom_link':
        console.log('üîó Behandler DOM-lenke...');
        // Pr√∏v f√∏rst som PDF, s√• som dokumentside
        if (dokument.url.includes('.pdf')) {
          return await downloadAndParsePDF(dokument.url, browser);
        } else {
          return await downloadAndParseDocumentPage(dokument.url, browser);
        }
      
      case 'download_button':
        console.log('üì• Behandler nedlastingsknapp...');
        if (dokument.url && dokument.url.includes('.pdf')) {
          return await downloadAndParsePDF(dokument.url, browser);
        } else {
          return { success: false, error: 'Nedlastingsknapp peker ikke p√• PDF' };
        }
      
      default:
        console.log('‚ö†Ô∏è Ukjent dokumenttype:', dokument.type);
        return { success: false, error: `Ukjent dokumenttype: ${dokument.type}` };
    }
  } catch (error) {
    console.error('‚ùå Feil ved behandling av dokument:', error.message);
    console.error('‚ùå Stack trace:', error.stack?.substring(0, 500));
    return { success: false, error: error.message, details: error.stack?.substring(0, 200) };
  }
}

// Funksjon for √• parse base64-encodede PDF-er
async function parseBase64PDF(base64Data) {
  console.log('üì¶ Parser base64 PDF-data');
  
  try {
    let base64String = '';
    
    if (typeof base64Data === 'string') {
      // Se etter base64-m√∏nster i strengen
      const base64Match = base64Data.match(/([A-Za-z0-9+\/=]{100,})/);
      if (base64Match) {
        base64String = base64Match[1];
      }
      // Sjekk om hele strengen er base64
      else if (/^[A-Za-z0-9+\/=]+$/.test(base64Data) && base64Data.length > 100) {
        base64String = base64Data;
      }
    } else if (typeof base64Data === 'object') {
      // Se etter base64 i objektstrukturen
      const findBase64 = (obj) => {
        for (const key in obj) {
          if (typeof obj[key] === 'string' && obj[key].length > 100 && /^[A-Za-z0-9+\/=]+$/.test(obj[key])) {
            return obj[key];
          } else if (typeof obj[key] === 'object' && obj[key] !== null) {
            const result = findBase64(obj[key]);
            if (result) return result;
          }
        }
        return null;
      };
      
      base64String = findBase64(base64Data);
    }
    
    if (!base64String) {
      throw new Error('Ingen base64 PDF-data funnet');
    }
    
    // Konverter base64 til buffer
    const pdfBuffer = Buffer.from(base64String, 'base64');
    console.log('üìÑ Base64 PDF konvertert, st√∏rrelse:', pdfBuffer.length, 'bytes');
    
    // Parse PDF med pdf-parse
    const pdfData = await pdfParse(pdfBuffer);
    console.log('üìñ Base64 PDF parsert, antall sider:', pdfData.numpages);
    
    return {
      success: true,
      text: pdfData.text,
      pages: pdfData.numpages,
      metadata: pdfData.info,
      source: 'base64'
    };
    
  } catch (error) {
    console.error('‚ùå Feil ved parsing av base64 PDF:', error.message);
    return { success: false, error: error.message };
  }
}

// Funksjon for √• ekstrahere tekst fra JSON-responser
async function extractTextFromJSON(jsonData, url) {
  console.log('üìã Ekstraherer tekst fra JSON-data');
  
  try {
    let tekst = '';
    
    // Pr√∏v forskjellige m√•ter √• finne tekst i JSON-strukturen
    const extractTextRecursive = (obj, depth = 0) => {
      if (depth > 10) return; // Unng√• evig rekursjon
      
      for (const key in obj) {
        const value = obj[key];
        
        if (typeof value === 'string') {
          // Se etter tekst som ser ut som dokumentinnhold
          if (value.length > 50 && (
            key.toLowerCase().includes('text') ||
            key.toLowerCase().includes('content') ||
            key.toLowerCase().includes('description') ||
            key.toLowerCase().includes('body') ||
            key.toLowerCase().includes('document') ||
            value.includes('kvm') ||
            value.includes('kr ') ||
            value.includes('bygge√•r') ||
            value.includes('rom') ||
            value.includes('salgsoppgave') ||
            value.includes('prospekt')
          )) {
            tekst += value + '\n\n';
          }
        } else if (typeof value === 'object' && value !== null) {
          extractTextRecursive(value, depth + 1);
        }
      }
    };
    
    extractTextRecursive(jsonData);
    
    if (tekst.trim().length > 0) {
      console.log('‚úÖ Fant tekst i JSON, lengde:', tekst.length);
      return {
        success: true,
        text: tekst.trim(),
        source: 'json',
        sourceUrl: url
      };
    } else {
      throw new Error('Ingen relevant tekst funnet i JSON');
    }
    
  } catch (error) {
    console.error('‚ùå Feil ved tekstekstraksjon fra JSON:', error.message);
    return { success: false, error: error.message };
  }
}

// **STEG 2**: Funksjon for √• laste ned og parse dokumentsider med PDF-st√∏tte
async function downloadAndParseDocumentPage(url, browser) {
  console.log('üåê Laster ned dokumentside:', url);
  
  try {
    const page = await browser.newPage();
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36');
    
    await page.goto(url, { 
      waitUntil: 'networkidle0',
      timeout: 15000 
    });
    
    const pageContent = await page.content();
    // **STEG 2**: Send browser-instans til extractTextFromDocumentPage for PDF-st√∏tte
    const result = await extractTextFromDocumentPage(pageContent, url, browser);
    
    await page.close();
    return result;
    
  } catch (error) {
    console.error('‚ùå Feil ved nedlasting av dokumentside:', error.message);
    return { success: false, error: error.message };
  }
}

// **STEG 2**: Forbedret funksjon for √• ekstrahere tekst fra dokumentsider med PDF-st√∏tte
async function extractTextFromDocumentPage(pageContent, url, browser = null) {
  console.log('üìÑ === EKSTRAHERER TEKST FRA DOKUMENTSIDE ===');
  console.log('üìÑ URL:', url);
  
  try {
    // **NYT**: Bruk cheerio for √• parse HTML og se etter PDF-er
    const cheerio = require('cheerio');
    const $ = cheerio.load(pageContent);
    
    // **STEG 2**: Sjekk f√∏rst om det finnes iframe eller object med PDF
    console.log('üîç S√∏ker etter PDF i iframe/object tags...');
    const pdfElements = [];
    
    // S√∏k etter iframe med PDF
    $('iframe').each((index, element) => {
      const src = $(element).attr('src') || $(element).attr('data-src');
      const title = $(element).attr('title') || $(element).attr('aria-label') || '';
      
      if (src && (src.includes('.pdf') || src.includes('pdf') || title.toLowerCase().includes('pdf'))) {
        pdfElements.push({
          type: 'iframe_pdf',
          url: src.startsWith('http') ? src : new URL(src, url).href,
          title: title,
          element: 'iframe'
        });
        console.log('üìÑ Fant PDF i iframe:', src);
      }
    });
    
    // S√∏k etter object med PDF
    $('object').each((index, element) => {
      const data = $(element).attr('data') || $(element).attr('data-src');
      const type = $(element).attr('type') || '';
      
      if (data && (data.includes('.pdf') || data.includes('pdf') || type.includes('pdf'))) {
        pdfElements.push({
          type: 'object_pdf',
          url: data.startsWith('http') ? data : new URL(data, url).href,
          title: type,
          element: 'object'
        });
        console.log('üìÑ Fant PDF i object:', data);
      }
    });
    
    // S√∏k etter embed med PDF
    $('embed').each((index, element) => {
      const src = $(element).attr('src') || $(element).attr('data-src');
      const type = $(element).attr('type') || '';
      
      if (src && (src.includes('.pdf') || src.includes('pdf') || type.includes('pdf'))) {
        pdfElements.push({
          type: 'embed_pdf',
          url: src.startsWith('http') ? src : new URL(src, url).href,
          title: type,
          element: 'embed'
        });
        console.log('üìÑ Fant PDF i embed:', src);
      }
    });
    
    // **STEG 2**: Hvis vi fant PDF-elementer, pr√∏v √• laste ned PDF-en direkte
    if (pdfElements.length > 0 && browser) {
      console.log('üéØ Fant', pdfElements.length, 'PDF-elementer, pr√∏ver direkte PDF-nedlasting...');
      
      for (const pdfElement of pdfElements) {
        try {
          console.log(`üì• Fors√∏ker √• laste ned PDF fra ${pdfElement.element}: ${pdfElement.url}`);
          
          // Bruk eksisterende downloadAndParsePDF funksjon
          const pdfResult = await downloadAndParsePDF(pdfElement.url, browser);
          
          if (pdfResult.success && pdfResult.text && pdfResult.text.length > 100) {
            console.log('‚úÖ SUKSESS: PDF lastet ned og parsert fra dokumentside!');
            console.log('üìä Tekstlengde fra PDF:', pdfResult.text.length, 'tegn');
            
            return {
              success: true,
              text: pdfResult.text,
              source: `pdf_from_${pdfElement.element}`,
              sourceUrl: pdfElement.url,
              originalDocumentUrl: url,
              numPages: pdfResult.numPages,
              fileSize: pdfResult.fileSize
            };
          } else {
            console.log('‚ö†Ô∏è PDF-nedlasting feilet:', pdfResult.error);
          }
          
        } catch (pdfError) {
          console.log('‚ùå Feil ved PDF-nedlasting fra', pdfElement.element, ':', pdfError.message);
          continue; // Pr√∏v neste PDF-element
        }
      }
      
      console.log('‚ö†Ô∏è Alle PDF-nedlastinger feilet, faller tilbake til HTML-parsing');
    } else if (pdfElements.length > 0) {
      console.log('‚ö†Ô∏è Fant PDF-elementer men mangler browser-instans for nedlasting');
    } else {
      console.log('‚ÑπÔ∏è Ingen PDF-elementer funnet, bruker HTML-parsing');
    }
    
    // **STEG 2**: Fallback til HTML-tekstekstraksjon (eksisterende logikk)
    console.log('üìÑ === FALLBACK: BRUKER HTML-TEKSTEKSTRAKSJON ===');
    console.log('‚ö†Ô∏è Dette er fallback-metode - kan mangle viktig informasjon fra PDF');
    
    // Fjern ikke-relevante elementer
    $('script, style, nav, header, footer, .cookie-banner, .ad, .navigation, .menu').remove();
    
    // Hent tekst fra hovedinnhold
    let text = '';
    const contentSelectors = [
      'main',
      '[role="main"]',
      '.content',
      '.document-content',
      '.pdf-content',
      '.document-viewer',
      '.article-content',
      'article',
      '.main-content',
      '.document-container',
      '.pdf-container'
    ];
    
    for (const selector of contentSelectors) {
      const element = $(selector);
      if (element.length > 0) {
        text = element.text();
        console.log(`üìÑ Hentet tekst fra selector: ${selector} (${text.length} tegn)`);
        break;
      }
    }
    
    // Fallback til body hvis ingen hovedinnhold funnet
    if (!text || text.length < 100) {
      text = $('body').text();
      console.log('üìÑ Fallback til body-tekst:', text.length, 'tegn');
    }
    
    // Rens teksten
    const cleanedText = text
      .replace(/\s+/g, ' ')
      .replace(/\n+/g, '\n')
      .trim();
    
    if (cleanedText.length > 50) {
      console.log('‚úÖ HTML-tekstekstraksjon fullf√∏rt');
      console.log('üìä Renset tekstlengde:', cleanedText.length, 'tegn');
      console.log('‚ö†Ô∏è MERK: Dette er HTML-fallback, ikke PDF-innhold');
      
      return {
        success: true,
        text: cleanedText,
        source: 'html_fallback',
        sourceUrl: url,
        isHtmlFallback: true, // **NYT**: Flagg for √• indikere at dette er fallback
        warning: 'Tekst hentet fra HTML-fallback, ikke direkte fra PDF'
      };
    } else {
      throw new Error('For lite innhold funnet p√• dokumentsiden (HTML-fallback)');
    }
    
  } catch (error) {
    console.error('‚ùå Feil ved tekstekstraksjon fra dokumentside:', error.message);
    console.error('üìÑ URL som feilet:', url);
    return { 
      success: false, 
      error: error.message,
      sourceUrl: url
    };
  }
}

app.post("/api/parse-finn", async (req, res) => {
  const { url } = req.body;
  if (!url || !url.includes("finn.no")) {
    return res.status(400).json({ error: "Ugyldig FINN-lenke." });
  }

  let browser;
  try {
    console.log(`üîç Starter scraping av: ${url}`);
    
    browser = await puppeteer.launch({ 
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    const page = await browser.newPage();
    
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
    
    console.log('üåê Navigerer til siden...');
    await page.goto(url, { waitUntil: "domcontentloaded", timeout: 30000 });
    
    // Sjekk om vi fikk en 404-side
    const pageTitle = await page.title();
    if (pageTitle.includes('404') || pageTitle.includes('Ikke funnet')) {
      throw new Error('Annonsen ble ikke funnet (404). Sjekk at lenken er korrekt og at annonsen fortsatt er aktiv.');
    }
    
    console.log('üìä Henter data...');
    const data = await page.evaluate(() => {
      const result = {};
      
      // Hent tittel
      const h1 = document.querySelector('h1');
      result.tittel = h1 ? h1.textContent.trim() : '';
      
      // Hent adresse - pr√∏v flere metoder
      let adresse = '';
      
      // Metode 1: Fra kart-ikon element
      const mapElement = document.querySelector('[data-testid="object-address"]');
      if (mapElement) {
        adresse = mapElement.textContent.trim();
      }
      
      // Metode 2: Fra URL-struktur eller meta-tags
      if (!adresse) {
        const bodyText = document.body.textContent;
        // S√∏k etter adresse-m√∏nstre i teksten
        const addressPatterns = [
          /([A-Z√Ü√ò√Ö][a-z√¶√∏√•\s]+\s+\d+[A-Za-z]?,\s+\d{4}\s+[A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/g,
          /(\w+\s+\d+[A-Za-z]?,\s+\d{4}\s+\w+)/g
        ];
        
        for (const pattern of addressPatterns) {
          const matches = [...bodyText.matchAll(pattern)];
          if (matches.length > 0) {
            // Ta den f√∏rste som ser ut som en ekte adresse
            for (const match of matches) {
              if (match[1] && match[1].length < 100 && match[1].includes(',')) {
                adresse = match[1];
                break;
              }
            }
            if (adresse) break;
          }
        }
      }
      
      result.adresse = adresse || 'Ukjent adresse';
      
      // Hent pris - forbedret regex
      const bodyText = document.body.textContent;
      const pricePatterns = [
        /Prisantydning[\s\n]*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
        /(\d{1,3}(?:\s\d{3})*)\s*kr(?!\s*\/)/i // Unng√• kr/m¬≤
      ];
      
      let pris = '';
      for (const pattern of pricePatterns) {
        const match = bodyText.match(pattern);
        if (match && match[1]) {
          pris = match[1] + ' kr';
          break;
        }
      }
      result.pris = pris;
      
      // Hent hovedbilde
      const ogImage = document.querySelector('meta[property="og:image"]');
      result.hovedbilde = ogImage ? ogImage.content : '';
      result.bilde = result.hovedbilde;
      
      // Hent bilder
      const images = [];
      if (result.hovedbilde) images.push(result.hovedbilde);
      
      const imgElements = document.querySelectorAll('img');
      imgElements.forEach(img => {
        if (img.src && img.src.includes('finncdn') && !images.includes(img.src)) {
          images.push(img.src);
        }
      });
      result.bilder = images.slice(0, 10);
      
      // Pr√∏v √• hente data fra JSON-strukturer
      const scripts = document.querySelectorAll('script');
      let jsonData = null;
      
      for (const script of scripts) {
        const content = script.textContent;
        if (content && content.includes('realestate-hydration')) {
          try {
            // Pr√∏v √• finne JSON-objektet med kontaktinfo
            const jsonStart = content.indexOf('{"type":"realestate-hydration"');
            if (jsonStart !== -1) {
              const jsonEnd = content.indexOf('}}', jsonStart) + 2;
              const jsonString = content.substring(jsonStart, jsonEnd);
              jsonData = JSON.parse(jsonString);
              break;
            }
          } catch (e) {
            // Pr√∏v alternativ metode
            try {
              const contactMatch = content.match(/"contacts":\[([^\]]+)\]/);
              if (contactMatch) {
                const nameMatch = content.match(/"name":"([^"]+)"/);
                const phoneMatch = content.match(/"phoneFormatted":"([^"]+)"/);
                const emailMatch = content.match(/"email":"([^"]+)"/);
                
                if (nameMatch) result.megler = nameMatch[1];
                if (phoneMatch) result.meglerTelefon = phoneMatch[1];
                if (emailMatch) result.meglerEpost = emailMatch[1];
              }
            } catch (e2) {
              // Ignorer feil
            }
          }
        }
      }
      
      // Hent megler info fra JSON hvis tilgjengelig
      if (jsonData && jsonData.contacts && jsonData.contacts[0]) {
        const contact = jsonData.contacts[0];
        result.megler = contact.name || '';
        if (contact.phone && contact.phone[0]) {
          result.meglerTelefon = contact.phone[0].phoneFormatted || '';
        }
        result.meglerEpost = contact.email || '';
      }
      
      // Forbedrede regex-m√∏nstre for n√∏kkeldata
      const patterns = {
        // Bruksareal - utvidede m√∏nstre for √• matche flere varianter
        bruksareal: [
          // Standard bruksareal m√∏nstre
          /(?:Internt\s+)?bruksareal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Bruksareal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /BRA[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /BRA-i[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /P-rom[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Prim√¶rareal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          // Omvendte m√∏nstre (m¬≤ f√∏rst)
          /(\d+)\s*m¬≤.*(?:BRA-i|bruksareal|prim√¶rareal)/i,
          /(\d+)\s*m¬≤.*(?:internt\s+)?bruksareal/i,
          // Areal varianter
          /Areal\s*\(bruk\)[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Areal[\s\n]*:?\s*(\d+)\s*m¬≤(?!\s*tomt)/i,
          /(\d+)\s*(?:kvm|m2).*bruksareal/i,
          /(\d+)\s*(?:kvm|m2).*BRA/i,
          // Uten m¬≤ (legges til senere)
          /(?:Internt\s+)?bruksareal[\s\n]*:?\s*(\d+)(?!\s*m¬≤)/i,
          /BRA-i[\s\n]*:?\s*(\d+)(?!\s*m¬≤)/i,
          /P-rom[\s\n]*:?\s*(\d+)(?!\s*m¬≤)/i,
          // Fra tekst med beskrivelse
          /boligen\s+har\s+(\d+)\s*m¬≤\s*bruksareal/i,
          /(\d+)\s*m¬≤\s*(?:stort|store)\s*bruksareal/i,
          // Med parenteser
          /Areal\s*\((\d+)\s*m¬≤\)/i,
          /Bruksareal\s*\((\d+)\s*m¬≤\)/i
        ],
        
        // Prim√¶rareal - nye m√∏nstre
        primaerareal: [
          /Prim√¶rareal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Prim√¶r\s*areal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /P-areal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /(\d+)\s*m¬≤.*prim√¶rareal/i,
          /BOP[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Prim√¶rareal\s*\((\d+)\s*m¬≤\)/i
        ],
        
        // Totalareal - nye m√∏nstre  
        totalareal: [
          /Totalareal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Total\s*areal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /BTA[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /(\d+)\s*m¬≤.*totalareal/i,
          /Samlet\s*areal[\s\n]*:?\s*(\d+)\s*m¬≤/i,
          /Totalareal\s*\((\d+)\s*m¬≤\)/i
        ],
        
        // Rom og soverom - utvidede m√∏nstre
        antallRom: [
          // Standard m√∏nstre
          /Rom[\s\n]*:?\s*(\d+)/i,
          /(\d+)\s*rom(?!\s*leilighet)/i,
          // Antall rom varianter
          /Antall\s+rom[\s\n]*:?\s*(\d+)/i,
          /(\d+)\s*stk\s*rom/i,
          /(\d+)\s*rom\s*(?:i\s*alt|totalt)/i,
          // P-rom (prim√¶rrom)
          /P-rom[\s\n]*:?\s*(\d+)/i,
          /Prim√¶rrom[\s\n]*:?\s*(\d+)/i,
          // Andre varianter
          /Rom\s*\((\d+)\)/i,
          /Romfordeling[\s\S]*?(\d+)\s*rom/i,
          /(\d+)-roms?\s*(?:leilighet|bolig)/i,
          // Med bindestrek eller skr√•strek
          /Rom[-/]\s*(\d+)/i,
          /(\d+)[-/]roms?/i
        ],
        antallSoverom: [
          // Standard m√∏nstre
          /Soverom[\s\n]*:?\s*(\d+)/i,
          /(\d+)\s*soverom/i,
          // Antall soverom varianter
          /Antall\s+soverom[\s\n]*:?\s*(\d+)/i,
          /(\d+)\s*stk\s*soverom/i,
          /(\d+)\s*soverom\s*(?:i\s*alt|totalt)/i,
          // Sov-rom varianter
          /Sov-rom[\s\n]*:?\s*(\d+)/i,
          /Sov\.?rom[\s\n]*:?\s*(\d+)/i,
          // Andre varianter
          /Soverom\s*\((\d+)\)/i,
          /(\d+)\s*sov\.?rom/i,
          /(\d+)\s*sovrom/i,
          // Med bindestrek eller skr√•strek
          /Soverom[-/]\s*(\d+)/i,
          /(\d+)[-/]soverom/i,
          // Spesifikke beskrivelser
          /(\d+)\s*(?:doble?|store?|sm√•?)\s*soverom/i,
          /Soverom.*?(\d+)\s*(?:stk|rom)/i,
          // Fra romfordeling tekst
          /(?:har|med|inkludert)\s*(\d+)\s*soverom/i
        ],
        
        // Boligtype - mer spesifikke m√∏nstre
        boligtype: [
          /Boligtype[\s\n]*(Leilighet|Enebolig|Tomannsbolig|Rekkehus|G√•rdsbruk)/i,
          /(?:^|\n)(Leilighet|Enebolig|Tomannsbolig|Rekkehus|G√•rdsbruk)(?:\n|$)/i
        ],
        
        // Bygge√•r
        byggeaar: [
          /Bygge√•r[\s\n]*(\d{4})/i,
          /bygget[\s\n]*(\d{4})/i,
          /fra\s+(\d{4})/i
        ],
        
        // Eierform - mer spesifikke m√∏nstre
        eierform: [
          /Eieform[\s\n]*(Eier \(Selveier\)|Andel|Aksje)/i,
          /(?:^|\n)(Eier \(Selveier\)|Andel|Aksje)(?:\n|$)/i
        ],
        
        // Energimerking
        energimerking: [
          /Energimerking[\s\n]*([A-G])(?:\s*-\s*\w+)?/i,
          /Energiklasse[\s\n]*([A-G])/i
        ],
        
        // Kostnader - utvidede m√∏nstre
        felleskostnader: [
          /Felleskost\/mnd\.?[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /Felleskostnader[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /Fellesutg\.?[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i
        ],
        kommunaleAvg: [
          /Kommunale\s+avg\.?[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /Kommunale\s+avgifter[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /(\d+(?:\s\d{3})*)\s*kr\s*per\s*√•r.*kommunal/i,
          /(\d+(?:\s\d{3})*)\s*kr\/√•r.*kommunal/i
        ],
        eiendomsskatt: [
          /Eiendomsskatt[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /(\d+(?:\s\d{3})*)\s*kr\s*per\s*√•r.*eiendomsskatt/i,
          /(\d+(?:\s\d{3})*)\s*kr\/√•r.*eiendomsskatt/i
        ],
        fellesgjeld: [
          /Fellesgjeld[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i,
          /Andel\s+av\s+fellesgjeld[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i
        ],
        
        // Pris per kvm - flere varianter
        prisPerKvm: [
          /(\d+(?:\s\d{3})*)\s*kr\/m¬≤/i,
          /(\d+(?:\s\d{3})*)\s*kr\s*per\s*m¬≤/i,
          /Kvadratmeterpris[\s\n]*(\d+(?:\s\d{3})*)\s*kr/i
        ],
        
        // Etasje
        etasje: [
          /Etasje[\s\n]*(\d+)/i,
          /(\d+)\.\s*etasje/i
        ],
        
        // Postnummer og sted
        postnummer: [
          /(\d{4})\s+[A-Z√Ü√ò√Ö]/,
          /,\s*(\d{4})\s/
        ],
        
        // Kommune og bydel
        kommune: [
          /(\d{4})\s+([A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/,
          /,\s*\d{4}\s+([A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/
        ],
        bydel: [
          /([A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)\s+\d{4}/,
          /,\s*([A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)\s+\d{4}/
        ],
        
        // Visning
        visningsdato: [
          /Visning[\s\n]*-?\s*(\d{1,2}\.\s*\w+\s*kl\.\s*\d{2}:\d{2})/i,
          /(\d{1,2}\.\s*\w+\s*kl\.\s*\d{2}:\d{2})/i
        ],
        
        // Fasiliteter - forbedrede m√∏nstre
        parkering: [
          /(Dobbel\s+carport)/i,
          /(carport)/i,
          /(Garasje)/i,
          /(P-plass)/i,
          /parkering\s+([^.]{1,50})/i
        ],
        balkong: [
          /Balkong\/Terrasse[\s\n]*(\d+\s*m¬≤)/i,
          /(\d+\s*m¬≤).*balkong/i
        ],
        terrasse: [
          /Balkong\/Terrasse[\s\n]*(\d+\s*m¬≤)/i,
          /(\d+\s*m¬≤).*terrasse/i
        ],
        hage: [
          /Tomteareal[\s\n]*(\d+\s*m¬≤)/i,
          /Tomt[\s\n]*(\d+\s*m¬≤)/i
        ]
      };
      
      // S√∏k gjennom alle m√∏nstre
      for (const [key, patternArray] of Object.entries(patterns)) {
        for (const pattern of patternArray) {
          const match = bodyText.match(pattern);
          if (match && match[1] && match[1].trim()) {
            let value = match[1].trim();
            
            // Spesialbehandling for areal-felter - unng√• dobbel m¬≤
            if (['bruksareal', 'primaerareal', 'totalareal'].includes(key)) {
              if (!value.includes('m¬≤') && !value.includes('kvm') && !value.includes('m2')) {
                value = value + ' m¬≤';
              }
              // Fjern dobbel m¬≤ hvis det finnes
              value = value.replace(/m¬≤\s*m¬≤/, 'm¬≤');
              // Standardiser kvm og m2 til m¬≤
              value = value.replace(/\b(kvm|m2)\b/g, 'm¬≤');
            }
            
            // Spesialbehandling for kommune - ta andre gruppe hvis det finnes
            if (key === 'kommune' && match[2]) {
              value = match[2].trim();
            }
            
            // Rens opp verdier som er for lange eller inneholder rare tegn
            if (value.length > 100 || value.includes('\n')) {
              continue; // Pr√∏v neste m√∏nster
            }
            
            result[key] = value;
            
            // Logg hvilke m√∏nstre som treffer for debugging
            console.log(`üéØ Fant ${key}: "${value}" med m√∏nster:`, pattern.toString());
            
            break; // Ta f√∏rste match
          }
        }
      }
      
      // Spesialbehandling for boligtype - rens opp rare verdier
      if (!result.boligtype || result.boligtype.includes('"') || result.boligtype.includes('desktop') || result.boligtype.length < 3) {
        // Pr√∏v √• finne boligtype fra n√∏kkelinfo-seksjonen
        const boligtypeMatch = bodyText.match(/(?:Leilighet|Enebolig|Tomannsbolig|Rekkehus|G√•rdsbruk)/i);
        result.boligtype = boligtypeMatch ? boligtypeMatch[0] : '';
      }
      
      // Spesialbehandling for eierform - rens opp rare verdier  
      if (result.eierform && (result.eierform.length > 30 || result.eierform.includes('Soverom'))) {
        const eierformMatch = bodyText.match(/(?:Eier \(Selveier\)|Andel|Aksje)/i);
        result.eierform = eierformMatch ? eierformMatch[0] : '';
      }
      
      // Pr√∏v √• beregne pris per m¬≤ hvis det mangler
      if (!result.prisPerKvm && result.pris && result.bruksareal) {
        const prisNum = parseInt(result.pris.replace(/\s/g, '').replace('kr', ''));
        const arealNum = parseInt(result.bruksareal.replace('m¬≤', ''));
        if (prisNum && arealNum) {
          result.prisPerKvm = Math.round(prisNum / arealNum).toLocaleString('no-NO') + ' kr/m¬≤';
        }
      }
      
      return result;
    });

    // **PR√òV √Ö HENTE SALGSOPPGAVE-FAKTA FOR √Ö FORBEDRE DATA**
    // VIKTIG: Salgsoppgave er hovedkilden og skal prioriteres
    console.log('üìã === PR√òVER √Ö HENTE SALGSOPPGAVE-FAKTA ===');
    let salgsoppgaveFakta = {};
    
    try {
      // Hent salgsoppgave-tekst fra siden (forenklet versjon)
      const pageText = await page.evaluate(() => {
        const elementsToRemove = document.querySelectorAll('script, style, nav, header, footer');
        elementsToRemove.forEach(el => el.remove());
        return document.body.innerText;
      });
      
      if (pageText && pageText.length > 500) {
        console.log('üìÑ Fant tekst p√• siden, pr√∏ver √• ekstraktere fakta...');
        salgsoppgaveFakta = extractSalgsoppgaveFakta(pageText);
        console.log('‚úÖ Ekstraherte salgsoppgave-fakta:', Object.keys(salgsoppgaveFakta));
        
        // Kombiner scraping-data med salgsoppgave-fakta (prioriter salgsoppgave)
        data = combineDataWithSalgsoppgavePriority(data, salgsoppgaveFakta);
        console.log('üîÑ Kombinerte data med salgsoppgave-fakta');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Kunne ikke hente salgsoppgave-fakta:', error.message);
    }
    
    console.log('‚úÖ Scraping fullf√∏rt!');
    console.log('üìç Adresse:', data.adresse);
    console.log('üí∞ Pris:', data.pris);

    const resultData = {
      url,
      adresse: data.adresse || "Ukjent adresse",
      tittel: data.tittel || "Ukjent tittel",
      pris: data.pris || "",
      hovedbilde: data.hovedbilde || "",
      bilder: data.bilder || [],
      bilde: data.hovedbilde || "",
      boligtype: data.boligtype || "",
      bruksareal: data.bruksareal || "",
      primaerareal: data.primaerareal || "",
      totalareal: data.totalareal || "",
      antallRom: data.antallRom || "",
      antallSoverom: data.antallSoverom || "",
      etasje: data.etasje || "",
      antallEtasjer: data.antallEtasjer || "",
      byggeaar: data.byggeaar || "",
      eierform: data.eierform || "",
      energimerking: data.energimerking || "",
      felleskostnader: data.felleskostnader || "",
      kommunaleAvg: data.kommunaleAvg || "",
      eiendomsskatt: data.eiendomsskatt || "",
      fellesgjeld: data.fellesgjeld || "",
      formuesverdi: data.formuesverdi || "",
      prisPerKvm: data.prisPerKvm || "",
      parkering: data.parkering || "",
      hage: data.hage || "",
      balkong: data.balkong || "",
      terrasse: data.terrasse || "",
      kjeller: data.kjeller || "",
      oppvarming: data.oppvarming || "",
      internett: data.internett || "",
      kabel_tv: data.kabel_tv || "",
      kommune: data.kommune || "",
      bydel: data.bydel || "",
      postnummer: data.postnummer || "",
      koordinater: data.koordinater || null,
      visningsdato: data.visningsdato || "",
      budfrister: data.budfrister || "",
      megler: data.megler || "",
      meglerTelefon: data.meglerTelefon || "",
      meglerEpost: data.meglerEpost || "",
      scraped_at: new Date().toISOString(),
      beskrivelse: data.beskrivelse || "",
      
      // **METADATA OM DATAKILDE**
      _salgsoppgaveFakta: salgsoppgaveFakta || {},
      _dataKilde: data._dataKilde || {
        hovedkilde: 'scraping',
        fallback: 'ingen',
        timestamp: new Date().toISOString()
      }
    };
    
    // Logg hele resultatobjektet for debugging
    console.log('üìä RESULTAT SOM SENDES TIL FRONTEND:');
    console.log('=====================================');
    console.log(JSON.stringify(resultData, null, 2));
    console.log('=====================================');
    
    return res.json(resultData);
  } catch (error) {
    console.error('‚ùå Scraping feilet:', error);
    return res.status(500).json({ error: "Noe gikk galt under scraping.", details: error.message });
  } finally {
    if (browser) {
      await browser.close();
    }
  }
});

app.post("/api/analyse-takst", (req, res, next) => {
  if (req.headers['content-type'] && req.headers['content-type'].includes('multipart/form-data')) {
    upload.single('file')(req, res, next);
  } else {
    next();
  }
}, async (req, res) => {
  console.log("Mottok request til /api/analyse-takst");
  try {
    let tekst = "";
    if (req.file) {
      // PDF-opplasting
      try {
        const dataBuffer = fs.readFileSync(req.file.path);
        const pdfData = await pdfParse(dataBuffer);
        tekst = pdfData.text;
        fs.unlinkSync(req.file.path); // Slett fil etter bruk
        console.log("PDF-tekstlengde:", tekst.length);
      } catch (pdfErr) {
        console.error("Feil ved pdf-parse:", pdfErr);
        return res.status(400).json({ error: "Feil ved lesing av PDF.", details: pdfErr.message });
      }
    } else if (req.body.text) {
      // Manuell tekst
      tekst = req.body.text;
      console.log("Manuell tekstlengde:", tekst.length);
    } else {
      return res.status(400).json({ error: "Ingen PDF eller tekst mottatt." });
    }

    // Sjekk om tekst er tilstrekkelig
    if (!tekst || tekst.length < 20) {
      console.warn("For kort eller tom tekst fra PDF/innliming.", { tekstlengde: tekst.length });
      return res.status(400).json({ error: "Kunne ikke lese tekst fra PDF eller tekst er for kort.", tekstlengde: tekst.length });
    }

    // OpenAI-analyse
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (!openaiApiKey) {
      // Returner dummy-data hvis ingen API-n√∏kkel
      const dummyResult = {
        sammendrag: "Dette er et eksempel p√• sammendrag fra AI-analyse.",
        avvik: [
          { beskrivelse: "Fukt i kjeller", tg: "TG2" },
          { beskrivelse: "R√•te i vindu", tg: "TG3" }
        ],
        risiko: "Moderat risiko. TG3-avvik b√∏r utbedres snarlig.",
        forslagTittel: "Takstrapport for Eksempelveien 1"
      };
      
      // Logg dummy-resultatet for debugging
      console.log('üìä TAKST-ANALYSE DUMMY-RESULTAT:');
      console.log('=================================');
      console.log(JSON.stringify(dummyResult, null, 2));
      console.log('=================================');
      
      return res.json(dummyResult);
    }
    const openai = new OpenAI({ apiKey: openaiApiKey });
    const prompt = `Du er en erfaren norsk boligr√•dgiver og takstekspert. Du skal analysere innholdet i en takstrapport fra en bolig (rapporten er limt inn under). Oppsummer de viktigste punktene og gi brukeren en tydelig og informativ rapport.\n\n**Oppgaven din:**\n- G√• gjennom teksten og hent ut de viktigste forholdene, avvikene og eventuelle risikoer.\n- Fremhev spesielt alle funn med tilstandsgrad 2 eller 3 (TG2/TG3), avvik, feil eller ting som kan koste penger √• utbedre.\n- Lag en punktliste med maks 10 avvik og anbefalte tiltak. Hver avvik skal ha et felt 'tg' med verdien 'TG2' eller 'TG3' (ikke bare tall).\n- Gi et utfyllende sammendrag (det kan v√¶re langt) og en grundig risikovurdering.\n- Bruk et enkelt og forst√•elig spr√•k (ingen faguttrykk).\n- Er du usikker, informer om at rapporten ikke er komplett og anbefal brukeren √• lese hele takstrapporten selv.\n\nSvar alltid i gyldig, komplett JSON (ingen trailing commas, ingen kommentarer, ingen avbrutte arrays/objekter) med feltene: sammendrag, avvik (array med beskrivelse og tg), risiko, forslagTittel.\n\nHer er rapporten:\n${tekst}`;
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "Du er en hjelpsom boligekspert." },
        { role: "user", content: prompt }
      ],
      temperature: 0.2,
      max_tokens: 1200
    });
    // Finn JSON i svaret
    let jsonString = completion.choices[0].message.content.match(/\{[\s\S]*\}/)?.[0];
    if (!jsonString) {
      console.error("AI-svar mangler JSON:", completion.choices[0].message.content);
      return res.status(500).json({ error: "AI-svar mangler JSON.", aiSvar: completion.choices[0].message.content });
    }
    // Pr√∏v √• fjerne trailing commas og whitespace
    jsonString = jsonString.replace(/,(\s*[}\]])/g, '$1');
    try {
      const json = JSON.parse(jsonString);
      
      // Logg AI-analysert takstrapport for debugging
      console.log('üìä AI-ANALYSERT TAKSTRAPPORT:');
      console.log('==============================');
      console.log(JSON.stringify(json, null, 2));
      console.log('==============================');
      
      return res.json(json);
    } catch (err) {
      console.error("Kunne ikke parse AI-JSON:", err, "\nAI-svar:\n", jsonString);
      return res.status(500).json({ error: "Kunne ikke tolke AI-svar fra OpenAI.", aiSvar: jsonString });
    }
  } catch (err) {
    console.error(err);
    return res.status(500).json({ error: "Kunne ikke analysere takstrapport." });
  }
});

// Nytt endpoint for utvidet salgsoppgave-analyse
app.post("/api/analyse-salgsoppgave", async (req, res) => {
  console.log('üì• Mottatt foresp√∏rsel om salgsoppgave-analyse');
  
  try {
    const { url } = req.body;
    
    if (!url) {
      return res.status(400).json({
        success: false,
        error: "URL er p√•krevd"
      });
    }
    
    console.log('üîç Analyserer salgsoppgave for:', url);
    
    // F√• utvidet analyse med salgsoppgave (med intelligent caching)
    const result = await getCachedOrAnalyzeSalgsoppgave(url);
    
    // Logg salgsoppgave-analyseresultat for debugging
    console.log('üìä SALGSOPPGAVE-ANALYSE RESULTAT:');
    console.log('==================================');
    console.log(JSON.stringify(result, null, 2));
    console.log('==================================');
    
    res.json(result);
    
  } catch (error) {
    console.error('‚ùå Feil i salgsoppgave endpoint:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Kombinert endpoint som gir b√•de grunnleggende scraping OG salgsoppgave-analyse
app.post("/api/full-analysis", async (req, res) => {
  console.log('üì• Mottatt foresp√∏rsel om full boliganalyse');
  
  try {
    const { url } = req.body;
    
    if (!url) {
      return res.status(400).json({
        success: false,
        error: "URL er p√•krevd"
      });
    }
    
    console.log('üè† Starter full analyse for:', url);
    
    // Kj√∏r parallellt for √• spare tid
    const promises = [];
    
    // Grunnleggende scraping
    const basicScrapingPromise = new Promise(async (resolve, reject) => {
      try {
        const browser = await puppeteer.launch({ 
          headless: true,
          args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        try {
          const page = await browser.newPage();
          await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
          await page.goto(url, { waitUntil: "domcontentloaded", timeout: 30000 });
          
          const data = await page.evaluate(() => {
            // Samme evaluate-kode som i hovedendepunktet
            const result = {};
            
            // Hent tittel
            const h1 = document.querySelector('h1');
            result.tittel = h1 ? h1.textContent.trim() : '';
            
            // Hent adresse
            let adresse = '';
            const mapElement = document.querySelector('[data-testid="object-address"]');
            if (mapElement) {
              adresse = mapElement.textContent.trim();
            }
            
            if (!adresse) {
              const bodyText = document.body.textContent;
              const addressPatterns = [
                /([A-Z√Ü√ò√Ö][a-z√¶√∏√•\s]+\s+\d+[A-Za-z]?,\s+\d{4}\s+[A-Z√Ü√ò√Ö][a-z√¶√∏√•]+)/g,
                /(\w+\s+\d+[A-Za-z]?,\s+\d{4}\s+\w+)/g
              ];
              
              for (const pattern of addressPatterns) {
                const matches = [...bodyText.matchAll(pattern)];
                if (matches.length > 0) {
                  for (const match of matches) {
                    if (match[1] && match[1].length < 100 && match[1].includes(',')) {
                      adresse = match[1];
                      break;
                    }
                  }
                  if (adresse) break;
                }
              }
            }
            
            result.adresse = adresse || 'Ukjent adresse';
            
            // Hent pris
            const bodyText = document.body.textContent;
            const pricePatterns = [
              /Prisantydning[\s\n]*(\d{1,3}(?:\s\d{3})*)\s*kr/i,
              /(\d{1,3}(?:\s\d{3})*)\s*kr(?!\s*\/)/i
            ];
            
            let pris = '';
            for (const pattern of pricePatterns) {
              const match = bodyText.match(pattern);
              if (match && match[1]) {
                pris = match[1] + ' kr';
                break;
              }
            }
            result.pris = pris;
            
            // Resten av data...
            const ogImage = document.querySelector('meta[property="og:image"]');
            result.hovedbilde = ogImage ? ogImage.content : '';
            
            return result;
          });
          
          resolve(data);
        } finally {
          await browser.close();
        }
      } catch (error) {
        reject(error);
      }
    });
    
    promises.push(basicScrapingPromise);
    promises.push(getCachedOrAnalyzeSalgsoppgave(url));
    
    const [basicData, salgsoppgaveAnalysis] = await Promise.allSettled(promises);
    
    // **SL√Ö SAMMEN DATA MED PRIORITERING AV SALGSOPPGAVE**
    console.log('üîÑ === SL√ÖR SAMMEN GRUNNLEGGENDE DATA OG SALGSOPPGAVE-ANALYSE ===');
    
    const scrapingData = basicData.status === 'fulfilled' ? basicData.value : {};
    const analysisResult = salgsoppgaveAnalysis.status === 'fulfilled' ? salgsoppgaveAnalysis.value : {};
    const salgsoppgaveFakta = analysisResult.salgsoppgaveFakta || {};
    
    // Kombiner data med prioritering av salgsoppgave-fakta
    const combinedBoligData = combineDataWithSalgsoppgavePriority(scrapingData, salgsoppgaveFakta);
    
    const result = {
      url: url,
      timestamp: new Date().toISOString(),
      
      // **KOMBINERTE BOLIGDATA (HOVEDRESULTAT)**
      // Salgsoppgave-data prioriteres over scraping-data
      boligData: combinedBoligData,
      
      // **KILDEDATA FOR REFERANSE**
      sources: {
        basicScraping: basicData.status === 'fulfilled' ? basicData.value : { error: basicData.reason?.message },
        salgsoppgaveAnalysis: analysisResult,
        salgsoppgaveFakta: salgsoppgaveFakta
      }
    };
    
    console.log('‚úÖ Full analyse fullf√∏rt');
    
    // Logg full analyse-resultat for debugging
    console.log('üìä FULL ANALYSE RESULTAT:');
    console.log('==========================');
    console.log(JSON.stringify(result, null, 2));
    console.log('==========================');
    
    res.json(result);
    
  } catch (error) {
    console.error('‚ùå Feil i full analyse endpoint:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

app.get("/api/ping", (req, res) => {
  res.json({ status: "ok" });
});

const PORT = 3001;
const HOST = '0.0.0.0'; // Listen on all network interfaces for mobile access
app.listen(PORT, HOST, () => {
console.log(`üöÄ Express-server kj√∏rer p√• http://localhost:${PORT}`);
console.log(`üì± Mobile access: http://[YOUR_IP]:${PORT}`);
});

// Nytt endpoint for manuell PDF-upload av salgsoppgave
app.post("/api/analyse-salgsoppgave-pdf", (req, res, next) => {
  if (req.headers['content-type'] && req.headers['content-type'].includes('multipart/form-data')) {
    upload.single('file')(req, res, next);
  } else {
    next();
  }
}, async (req, res) => {
  console.log("üìÑ Mottok request til /api/analyse-salgsoppgave-pdf");
  
  try {
    let tekst = "";
    let finnUrl = "";
    
    if (req.file) {
      // PDF-opplasting
      try {
        const dataBuffer = fs.readFileSync(req.file.path);
        const pdfData = await pdfParse(dataBuffer);
        tekst = pdfData.text;
        
        // **STEG 4**: Rydd opp midlertidig fil
        fs.unlinkSync(req.file.path);
        console.log("üìÑ PDF-tekstlengde:", tekst.length);
        console.log("üóëÔ∏è Midlertidig PDF-fil slettet");
      } catch (pdfErr) {
        console.error("‚ùå Feil ved pdf-parse:", pdfErr);
        
        // **STEG 4**: Rydd opp midlertidig fil selv ved feil
        if (req.file && req.file.path && fs.existsSync(req.file.path)) {
          try {
            fs.unlinkSync(req.file.path);
            console.log("üóëÔ∏è Midlertidig PDF-fil slettet (etter feil)");
          } catch (cleanupErr) {
            console.error("‚ö†Ô∏è Kunne ikke slette midlertidig fil:", cleanupErr.message);
          }
        }
        
        return res.status(400).json({ 
          success: false,
          error: "Feil ved lesing av PDF. Kontroller at filen er en gyldig PDF.", 
          details: pdfErr.message 
        });
      }
    } else if (req.body.text) {
      // Manuell tekst (fallback)
      tekst = req.body.text;
      console.log("üìù Manuell tekstlengde:", tekst.length);
    } else {
      return res.status(400).json({ 
        success: false,
        error: "Ingen PDF eller tekst mottatt. Last opp en PDF-fil." 
      });
    }

    // Hent Finn-URL fra request body hvis tilgjengelig
    if (req.body.finnUrl) {
      finnUrl = req.body.finnUrl;
      console.log("üîó Finn-URL mottatt:", finnUrl);
    }

    // Valider tekst
    if (!tekst || tekst.length < 50) {
      console.warn("‚ö†Ô∏è For kort eller tom tekst fra PDF.", { tekstlengde: tekst.length });
      return res.status(400).json({ 
        success: false,
        error: "Kunne ikke lese tekst fra PDF eller tekst er for kort. Kontroller at PDF-en inneholder lesbar tekst.", 
        tekstlengde: tekst.length 
      });
    }

    console.log("‚úÖ Gyldig salgsoppgave-tekst mottatt, starter analyse...");

    // **EKSTRAHER STRUKTURERTE FAKTA FRA SALGSOPPGAVE (HOVEDKILDE)**
    console.log('üìä === EKSTRAHERER STRUKTURERTE FAKTA FRA OPPLASTET SALGSOPPGAVE ===');
    const salgsoppgaveFakta = extractSalgsoppgaveFakta(tekst);
    console.log('‚úÖ Salgsoppgave-fakta ekstrahert:', Object.keys(salgsoppgaveFakta));

    // Ekstraher detaljert info for chat-bot
    const detailedInfo = extractDetailedInfo(tekst);
    console.log('‚úÖ Detaljert info ekstrahert:', Object.keys(detailedInfo));

    // **STEG 3**: Vurder tekstkvalitet og behov for ytterligere informasjon
    const textQuality = tekst.length > 3000 ? 'h√∏y' : 
                       tekst.length > 1000 ? 'medium' : 
                       tekst.length > 300 ? 'lav' : 'sv√¶rt lav';
    
    const needsMoreInfo = tekst.length < 3000;
    
    const textAnalysis = {
      hasText: true,
      textLength: tekst.length,
      quality: textQuality,
      sufficientForAnalysis: tekst.length > 300,
      recommendAIAnalysis: tekst.length > 1000,
      needsPDFUpload: false, // Ikke relevant siden vi allerede har PDF
      userFriendlyMessage: needsMoreInfo ? 
        "PDF-en er lastet opp, men inneholder begrenset informasjon. Analysen kan mangle noen detaljer." : 
        null,
      source: 'manual_pdf_upload'
    };

    // OpenAI-analyse hvis API-n√∏kkel er tilgjengelig
    let analysis = null;
    const openaiApiKey = process.env.OPENAI_API_KEY;
    
    if (openaiApiKey && tekst.length > 100) {
      console.log('ü§ñ Sender til OpenAI for salgsoppgave-analyse...');
      console.log('üìä Tekst lengde:', tekst.length, 'tegn');
      
      try {
        // Bygg utvidet prompt med strukturerte fakta
        let strukturerteFakta = '';
        if (Object.keys(salgsoppgaveFakta).length > 0) {
          strukturerteFakta = `\n\n**STRUKTURERTE FAKTA EKSTRAHERT FRA SALGSOPPGAVE (prioriter denne informasjonen):**\n`;
          for (const [key, value] of Object.entries(salgsoppgaveFakta)) {
            strukturerteFakta += `- ${key}: ${value}\n`;
          }
          strukturerteFakta += `\n**VIKTIG:** Bruk disse strukturerte fakta som hovedkilde i din analyse.\n`;
        }
        
        const fullPrompt = `Analyser denne salgsoppgaven som ble lastet opp manuelt:${strukturerteFakta}\n\n**FULL SALGSOPPGAVE-TEKST:**\n${tekst.substring(0, 10000)}`;
        
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: systemPrompt
            },
            {
              role: "user", 
              content: fullPrompt
            }
          ],
          temperature: 0.3,
          max_tokens: 2000
        });
        
        const responseContent = completion.choices[0].message.content;
        
        try {
          // Pr√∏v √• parse direkte f√∏rst
          analysis = JSON.parse(responseContent);
          console.log('‚úÖ OpenAI salgsoppgave-analyse fullf√∏rt (direkte parsing)');
        } catch (parseError) {
          console.log('‚ö†Ô∏è Direkte parsing feilet, pr√∏ver √• finne JSON i respons');
          
          // Pr√∏v √• finne JSON innenfor markdown code blocks
          let jsonString = responseContent;
          jsonString = jsonString.replace(/```json\n?/g, '').replace(/```\n?/g, '');
          
          const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            try {
              analysis = JSON.parse(jsonMatch[0]);
              console.log('‚úÖ OpenAI salgsoppgave-analyse fullf√∏rt (ekstrahert JSON)');
            } catch (secondParseError) {
              console.log('‚ö†Ô∏è Kunne ikke parse JSON fra OpenAI, bruker r√• respons');
              analysis = {
                raaAnalyse: responseContent,
                feil: 'Kunne ikke parse JSON fra OpenAI-respons'
              };
            }
          } else {
            console.log('‚ö†Ô∏è Ingen JSON funnet i OpenAI respons, bruker r√• respons');
            analysis = {
              raaAnalyse: responseContent,
              feil: 'Ingen JSON funnet i OpenAI-respons'
            };
          }
        }
        
      } catch (openaiError) {
        console.error('‚ùå OpenAI API feil:', openaiError);
        analysis = {
          feil: `OpenAI API feil: ${openaiError.message}`,
          tekst: tekst.substring(0, 1000) + '...'
        };
      }
    } else if (!openaiApiKey) {
      console.log('‚ö†Ô∏è Ingen OpenAI API-n√∏kkel, returnerer kun ekstraherte data');
      analysis = {
        feil: 'Ingen OpenAI API-n√∏kkel konfigurert',
        tekst: tekst.substring(0, 1000) + '...'
      };
    } else {
      analysis = {
        feil: 'Tekst for kort for AI-analyse',
        tekst: tekst
      };
    }

    const result = {
      success: true,
      source: 'manual_pdf_upload',
      uploadedAt: new Date().toISOString(),
      finnUrl: finnUrl || null,
      
      // **TEKSTANALYSE**
      textAnalysis: textAnalysis,
      textLength: tekst.length,
      
      // **AI-ANALYSE**
      analysis: analysis,
      
      // **HOVEDDATA FRA SALGSOPPGAVE**
      salgsoppgaveFakta: salgsoppgaveFakta,
      
      // **DETALJERT INFO FOR CHAT-BOT**
      detailedInfo: detailedInfo,
      
      // **RAW TEXT (kun i development)**
      rawText: process.env.NODE_ENV === 'development' ? tekst.substring(0, 2000) : undefined,
      
      // **METADATA**
      metadata: {
        processingMethod: 'manual_pdf_upload',
        textQuality: textQuality,
        hasAIAnalysis: !!analysis && !analysis.feil,
        extractedFactsCount: Object.keys(salgsoppgaveFakta).length,
        detailedInfoCount: Object.keys(detailedInfo).length
      }
    };

    console.log('üìä === MANUELL SALGSOPPGAVE-ANALYSE KOMPLETT ===');
    console.log('‚úÖ Success:', result.success);
    console.log('üìä Kilde:', result.source);
    console.log('üìä Tekstkvalitet:', result.textAnalysis.quality);
    console.log('üìä AI-analyse:', result.analysis ? 'Tilgjengelig' : 'Ikke tilgjengelig');
    console.log('üìä Salgsoppgave fakta:', Object.keys(result.salgsoppgaveFakta).length, 'felter');
    console.log('üìä Detaljert info:', Object.keys(result.detailedInfo).length, 'felter');
    
    // **STEG 4**: Rydd opp midlertidige filer (allerede gjort ovenfor)
    console.log('üßπ Midlertidige filer ryddet opp');
    
    // Logg resultat for debugging
    console.log('üìä MANUELL SALGSOPPGAVE-ANALYSE RESULTAT:');
    console.log('==========================================');
    console.log(JSON.stringify(result, null, 2));
    console.log('==========================================');
    
    return res.json(result);
    
  } catch (error) {
    console.error('‚ùå Feil i manuell salgsoppgave-analyse:', error);
    
    // **STEG 4**: Rydd opp midlertidig fil ved feil
    if (req.file && req.file.path && fs.existsSync(req.file.path)) {
      try {
        fs.unlinkSync(req.file.path);
        console.log('üóëÔ∏è Midlertidig PDF-fil slettet (etter feil)');
      } catch (cleanupErr) {
        console.error('‚ö†Ô∏è Kunne ikke slette midlertidig fil:', cleanupErr.message);
      }
    }
    
    return res.status(500).json({
      success: false,
      error: "Kunne ikke analysere salgsoppgave-PDF.",
      details: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Eksporter funksjoner for testing
module.exports = {
  extractBRAWithPriority,
  calculateQualityScore,
  estimateTokens,
  compressRelevantContent
};